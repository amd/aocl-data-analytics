/*
 * Copyright (C) 2024-2025 Advanced Micro Devices, Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 */

#include <numeric>

template <typename T> struct test_local_smo_type {
    std::vector<T> kernel_data, local_kernel_data;
    std::vector<T> local_alpha;
    std::vector<T> svc_alpha_expected, nusvc_alpha_expected;
    std::vector<T> gradient, local_gradient;
    std::vector<T> y, local_response;
    std::vector<da_int> idx;
    std::vector<T> alpha_diff;
    T first_diff = 0.0;
    da_int n = 0;
    T tol = 0.0, C = 0.0, nu = 0.0, eps = 0.0;
    T svc_expected_bias = 0.0, nusvc_expected_bias = 0.0;
};

template <typename T> struct test_is_upper_lower_type {
    T alpha = 0.0, y = 0.0, C = 0.0;
    bool is_low = false, is_up = false;
};

template <typename T> struct test_working_set_selection_type {
    std::vector<T> alpha, gradient, response;
    da_int i = 0, j = 0, i_expected = 0, j_expected = 0;
    std::vector<da_int> idx;
    std::vector<bool> I_up, I_low;
    T tau = 1e-6;
    da_int size = 0;
    T C = 0.0, min_gradient = 0.0, min_gradient_expected = 0.0;
    // parameters for j
    std::vector<T> kernel_matrix;
    T delta = 0.0, delta_expected = 0.0, max_gradient = 0.0, max_gradient_expected = 0.0,
      max_function = 0.0;
};

template <typename T> struct test_ldx_type {
    std::vector<T> X_train, X_train_row;
    std::vector<T> y_train;
    std::vector<T> X_test, X_test_row;
    std::vector<T> y_test;
    da_svm_model model = svm_undefined;
    std::string kernel;
    da_int ldx_train = 0, ldx_test = 0, ldx_train_row = 0, ldx_test_row = 0,
           lddecision_values = 1, lddecision_values_row = 1;
    da_int n_samples_test = 0, n_samples_train = 0, n_feat = 0, n_class = 1;
    // Arrays to check
    std::vector<T> decision_values, decision_values_row, y_pred;
    T score = 0.0;
};

template <typename T> struct test_get_results_type {
    std::vector<T> X_train, X_train_row;
    std::vector<T> y_train;
    da_svm_model model = svm_undefined;
    std::string kernel;
    da_int n_samples = 0, n_feat = 0, n_class = 0, n_support_expected = 0;
    // Arrays to check
    std::vector<T> bias_expected;
    std::vector<da_int> n_support_per_class_expected, support_indexes_expected;
    std::vector<T> support_coefficients_expected, support_coefficients_row_expected;
    std::vector<T> support_vectors_expected, support_vectors_row_expected;
};

template <typename T> struct test_row_major_type {
    std::vector<T> X_train, y_train;
    std::vector<T> X_test, y_test;
    da_svm_model model = svm_undefined;
    std::string kernel;
    da_int n_samples = 0, n_samples_test = 0, n_feat = 0, n_feat_test = 0, n_class = 0;
    // Arrays to check
    std::vector<T> decision_values_ovr, decision_values_ovo, y_pred;
    T score = 0.0;
    // For 'multiple calls' test to test get_results apart from standard functions like compute, predict, score
    std::vector<T> bias_expected;
    da_int n_support_expected = 0;
    std::vector<da_int> n_support_per_class_expected, support_indexes_expected;
    std::vector<T> support_coefficients_expected, support_vectors_expected;
};

template <typename T> struct test_invalid_data_type {
    std::vector<T> X_train, y_train;
    std::vector<da_svm_model> model;
    std::string kernel;
    da_int n_samples = 0, n_feat = 0;
    da_status set_data_expected_status = da_status_success,
              compute_expected_status = da_status_success,
              predict_expected_status = da_status_success;
};

template <typename T>
void set_rbf_kernel_data(std::vector<test_local_smo_type<T>> &params) {
    test_local_smo_type<T> data;
    data.kernel_data = {
        1.0000000000000000,     0.6108408773314487,     0.0012384559863772833,
        0.00022578897154388643, 0.054894243141814576,   0.4596541373774156,
        0.34140339394529806,    0.0004650235472860391,  0.3127630654140269,
        0.4288998746526696,     0.007210624085519998,   0.5040527922376996,
        4.403374882018113e-06,  0.09003521767934976,    0.0843010531115885,
        2.1121762883997903e-05, 0.7148797836745913,     0.04706731481330785,
        0.32855069738381476,    0.008842209320317712,   0.24961486244209735,
        0.03678536114985147,    0.004512432364628136,   0.00847892713458958,
        0.6108408773314487,     1.0000000000000000,     0.00746779147534325,
        0.000255569685481961,   0.10792617745910608,    0.2095920015133594,
        0.6843053611944853,     0.0002994788008579656,  0.7151169346334766,
        0.33655517909366567,    0.022781926410384755,   0.16321324142399737,
        1.5538064656473224e-06, 0.3778653972397073,     0.20488026293091133,
        0.00023880359454056576, 0.5105803095547916,     0.04236928647597004,
        0.40069318446082935,    0.07420431523153233,    0.20499055686677323,
        0.17862182465059315,    0.0016698875964739253,  0.03482284179005156,
        0.0012384559863772833,  0.00746779147534325,    1.0000000000000000,
        0.026684177609457623,   0.14442582309964727,    1.3054361702549845e-05,
        0.06425575145109906,    6.46041213234641e-08,   0.011703252585055089,
        0.00010794029992903748, 0.5863881548077423,     0.0004498026570793305,
        4.995757411573664e-05,  0.1794343332483767,     0.18277242066300128,
        0.5710965369078259,     0.0006579303445934601,  5.409473050812079e-05,
        0.03601654470677446,    0.3698175561851389,     0.00013841064803600138,
        0.3822904589112248,     7.266483063468253e-08,  0.7536912788603426,
        0.00022578897154388643, 0.000255569685481961,   0.026684177609457623,
        1.0000000000000000,     0.12466466184031161,    5.2540772102118535e-06,
        0.004774277066321412,   3.0800457006061254e-12, 0.0010642908765695171,
        1.0003244705922632e-06, 0.17154900011269167,    0.0018717168576146699,
        0.20598383924763722,    0.0025279433938356593,  0.05098449485917405,
        0.003573558596376954,   1.7030829598845232e-05, 3.341560213826463e-08,
        0.02188193833769447,    0.0010380478256799594,  4.889024740059478e-07,
        0.008539562204325111,   3.391438575217662e-11,  0.06829262746443235,
        0.054894243141814576,   0.10792617745910608,    0.14442582309964727,
        0.12466466184031161,    1.0000000000000000,     0.004987163113731958,
        0.43035147139045543,    7.23488830464161e-08,   0.24127778482135337,
        0.0025088619045593144,  0.5822477220681812,     0.07540223654299617,
        0.003647348063361831,   0.28904532976667746,    0.9064819364310086,
        0.010801649506764838,   0.012732068424302532,   0.00013065489810506475,
        0.6466426385146106,     0.09748194346778849,    0.0012534866978771383,
        0.3954697649333683,     5.375642181065906e-07,  0.47553347916386945,
        0.4596541373774156,     0.20959200151335933,    1.3054361702549845e-05,
        5.2540772102118535e-06, 0.004987163113731958,   1.0000000000000000,
        0.053856873219405625,   6.722510220998473e-05,  0.12584438692223093,
        0.24561866042168015,    0.00018590163530707616, 0.28907817503040284,
        2.5436748629553165e-07, 0.0076640387130064965,  0.007966136194824907,
        6.645923786579596e-08,  0.2689126205779824,     0.007803365138370919,
        0.06381209316495562,    0.0002865387420668093,  0.08187621074581017,
        0.0020104051853165467,  0.0016233668271068242,  0.00021035200248015917,
        0.34140339394529806,    0.6843053611944853,     0.06425575145109906,
        0.004774277066321412,   0.43035147139045543,    0.053856873219405625,
        1.0000000000000000,     2.9532684940835818e-05, 0.7125598456819013,
        0.08029220953826331,    0.17039000811725824,    0.14266868781986256,
        3.702004127563607e-05,  0.7094338220585216,     0.6452216028781652,
        0.003658797888154095,   0.1964208583264261,     0.009761103116512468,
        0.7371675529337199,     0.21439991338710407,    0.05136432941148192,
        0.5282720545843904,     0.0001441589662057939,  0.21780100344018763,
        0.0004650235472860391,  0.0002994788008579656,  6.46041213234641e-08,
        3.0800457006061254e-12, 7.23488830464161e-08,   6.722510220998473e-05,
        2.9532684940835818e-05, 1.0000000000000000,     8.40862743980829e-06,
        0.018869072255249145,   2.5557542232209453e-08, 5.314206025739995e-06,
        3.127036996933919e-16,  2.0098927677570286e-05, 4.3858162361435057e-07,
        3.4883429189728e-09,    0.0077332246199880664,  0.31095494866333834,
        2.722580436571655e-06,  6.211461338713716e-06,  0.06936862140712241,
        2.679946392021035e-06,  0.6011436264814337,     1.1288839454108412e-07,
        0.3127630654140269,     0.7151169346334766,     0.011703252585055089,
        0.0010642908765695171,  0.24127778482135337,    0.12584438692223093,
        0.7125598456819013,     8.408627439808275e-06,  1.0000000000000000,
        0.08058916880139241,    0.04825940703362114,    0.13668944505548997,
        1.1783620576568566e-05, 0.4210140269643077,     0.38205601194470207,
        0.0003639475798197731,  0.15201478309694103,    0.003999633944884527,
        0.5464558923807361,     0.08296725464467035,    0.03468927813309881,
        0.255473679030491,      6.668639625319006e-05,  0.06308940741186107,
        0.4288998746526696,     0.33655517909366567,    0.00010794029992903748,
        1.0003244705922666e-06, 0.0025088619045593144,  0.24561866042168015,
        0.08029220953826331,    0.018869072255249145,   0.08058916880139241,
        1.0000000000000000,     0.0003064507795780022,  0.05422570484950386,
        3.3860249603434297e-09, 0.028741665779495253,   0.006673559738957013,
        1.9577746001170022e-06, 0.8366208559477296,     0.3420724496814585,
        0.03260488305120221,    0.0034287819298257044,  0.8425527562046857,
        0.007001176282676985,   0.09033977724572603,    0.0006037963707988259,
        0.007210624085520004,   0.022781926410384755,   0.5863881548077423,
        0.17154900011269167,    0.5822477220681812,     0.00018590163530707616,
        0.17039000811725824,    2.5557542232209453e-08, 0.04825940703362114,
        0.0003064507795780022,  1.0000000000000000,     0.006945771680449947,
        0.00180736621181449,    0.22201533222449307,    0.5457593420312928,
        0.12966055914374686,    0.002068012889359511,   4.365956385906942e-05,
        0.18965683170491857,    0.1871901317092371,     0.00023907261061700754,
        0.4378319337670503,     8.11315206514573e-08,   0.9070914168873141,
        0.5040527922376996,     0.16321324142399737,    0.0004498026570793305,
        0.0018717168576146714,  0.07540223654299617,    0.28907817503040273,
        0.14266868781986256,    5.314206025739995e-06,  0.13668944505548997,
        0.05422570484950386,    0.006945771680449947,   1.0000000000000000,
        0.0002669056147727167,  0.01985496896769315,    0.0698338742780954,
        4.601006062518626e-06,  0.14911470653372472,    0.0018557231816298536,
        0.34003023083372863,    0.0010735176705288319,  0.021004691784283814,
        0.01060447296476911,    0.00013110608987183407, 0.0048878813531753286,
        4.403374882018113e-06,  1.5538064656473224e-06, 4.995757411573664e-05,
        0.20598383924763722,    0.003647348063361831,   2.5436748629553165e-07,
        3.702004127563601e-05,  3.127036996933919e-16,  1.1783620576568566e-05,
        3.3860249603434297e-09, 0.00180736621181449,    0.0002669056147727167,
        1.0000000000000000,     5.766232454926362e-06,  0.0007514578388543319,
        1.931529335187143e-06,  9.636898711936529e-08,  1.588887565514486e-11,
        0.0006599311130295748,  6.572214496360238e-07,  7.981379028470299e-10,
        2.2572485417433493e-05, 1.8041847981395873e-14, 0.00034468469797749025,
        0.09003521767934976,    0.3778653972397073,     0.1794343332483767,
        0.0025279433938356593,  0.28904532976667746,    0.0076640387130064965,
        0.7094338220585216,     2.0098927677570286e-05, 0.4210140269643077,
        0.028741665779495253,   0.22201533222449307,    0.01985496896769315,
        5.766232454926362e-06,  1.0000000000000000,     0.5245388988939195,
        0.021884622728941195,   0.06881791968862881,    0.00634492270560294,
        0.322630159557767,      0.6378204379260612,     0.02337933309141799,
        0.8721386504284417,     4.834112384781365e-05,  0.36130607250259605,
        0.0843010531115885,     0.20488026293091133,    0.18277242066300128,
        0.05098449485917405,    0.9064819364310086,     0.007966136194824907,
        0.6452216028781652,     4.3858162361435057e-07, 0.38205601194470207,
        0.006673559738957013,   0.5457593420312928,     0.0698338742780954,
        0.0007514578388543319,  0.5245388988939195,     1.0000000000000000,
        0.015050648588301347,   0.027029290271788367,   0.0004941724054853785,
        0.6976420451822513,     0.20506574625818405,    0.00373418726910818,
        0.6239892981758557,     2.454345242810963e-06,  0.5404657888502823,
        2.1121762883997903e-05, 0.00023880359454056532, 0.5710965369078259,
        0.003573558596376954,   0.010801649506764838,   6.645923786579596e-08,
        0.003658797888154095,   3.4883429189728e-09,    0.0003639475798197731,
        1.9577746001170022e-06, 0.12966055914374686,    4.601006062518626e-06,
        1.9315293351871395e-06, 0.021884622728941195,   0.015050648588301347,
        1.0000000000000000,     1.4767523266372524e-05, 2.704443075656937e-06,
        0.0013611341611466424,  0.12054671162993229,    3.896351361504322e-06,
        0.06546176008258274,    1.5596522609900459e-09, 0.1975078825956567,
        0.7148797836745913,     0.5105803095547916,     0.0006579303445934601,
        1.7030829598845232e-05, 0.012732068424302532,   0.2689126205779824,
        0.1964208583264261,     0.0077332246199880664,  0.15201478309694103,
        0.8366208559477296,     0.002068012889359511,   0.14911470653372472,
        9.636898711936529e-08,  0.06881791968862881,    0.027029290271788367,
        1.4767523266372524e-05, 1.0000000000000000,     0.24905740602616225,
        0.1080258514448011,     0.00910395560155684,    0.6981663353289347,
        0.022222675601806588,   0.04038497348752399,    0.0033396680861885082,
        0.04706731481330785,    0.04236928647597004,    5.409473050812079e-05,
        3.341560213826463e-08,  0.00013065489810506475, 0.007803365138370919,
        0.009761103116512468,   0.31095494866333834,    0.003999633944884527,
        0.3420724496814585,     4.365956385906942e-05,  0.0018557231816298536,
        1.588887565514486e-11,  0.00634492270560294,    0.0004941724054853785,
        2.704443075656932e-06,  0.24905740602616225,    1.0000000000000000,
        0.0018562094917888715,  0.0017948605745275188,  0.6742643581033398,
        0.0014580163991524846,  0.40611568955250277,    0.00012602318642319587,
        0.32855069738381476,    0.40069318446082935,    0.03601654470677446,
        0.02188193833769447,    0.6466426385146106,     0.06381209316495562,
        0.7371675529337199,     2.722580436571655e-06,  0.5464558923807361,
        0.03260488305120221,    0.18965683170491857,    0.34003023083372863,
        0.0006599311130295748,  0.322630159557767,      0.6976420451822513,
        0.0013611341611466424,  0.1080258514448011,     0.0018562094917888715,
        1.0000000000000000,     0.06142515288510974,    0.015950757867517956,
        0.27524827615905695,    2.5487608143054766e-05, 0.17236136319128323,
        0.008842209320317712,   0.07420431523153233,    0.3698175561851389,
        0.0010380478256799594,  0.09748194346778849,    0.0002865387420668088,
        0.21439991338710407,    6.211461338713716e-06,  0.08296725464467035,
        0.0034287819298257044,  0.1871901317092371,     0.0010735176705288319,
        6.572214496360238e-07,  0.6378204379260612,     0.20506574625818405,
        0.12054671162993229,    0.00910395560155684,    0.0017948605745275188,
        0.06142515288510974,    1.0000000000000000,     0.004015498907207856,
        0.7200250912641438,     6.35776346667147e-06,   0.3765776359364778,
        0.24961486244209735,    0.20499055686677323,    0.00013841064803600138,
        4.889024740059487e-07,  0.0012534866978771383,  0.08187621074581017,
        0.05136432941148192,    0.06936862140712241,    0.03468927813309881,
        0.8425527562046857,     0.00023907261061700754, 0.021004691784283814,
        7.981379028470299e-10,  0.02337933309141799,    0.00373418726910818,
        3.896351361504315e-06,  0.6981663353289347,     0.6742643581033398,
        0.015950757867517956,   0.004015498907207856,   1.0000000000000000,
        0.005773903069502308,   0.1983673899394051,     0.0005358840247785154,
        0.03678536114985147,    0.17862182465059315,    0.3822904589112248,
        0.008539562204325111,   0.3954697649333683,     0.0020104051853165467,
        0.5282720545843904,     2.679946392021035e-06,  0.255473679030491,
        0.007001176282676985,   0.4378319337670503,     0.01060447296476911,
        2.2572485417433493e-05, 0.8721386504284417,     0.6239892981758557,
        0.06546176008258274,    0.022222675601806588,   0.0014580163991524846,
        0.27524827615905695,    0.7200250912641438,     0.005773903069502308,
        1.0000000000000000,     6.012509955624177e-06,  0.6413524911495526,
        0.004512432364628136,   0.0016698875964739253,  7.266483063468253e-08,
        3.3914385752176735e-11, 5.375642181065906e-07,  0.0016233668271068242,
        0.0001441589662057939,  0.6011436264814337,     6.668639625319006e-05,
        0.09033977724572603,    8.11315206514573e-08,   0.00013110608987183383,
        1.8041847981395807e-14, 4.834112384781365e-05,  2.454345242810963e-06,
        1.5596522609900459e-09, 0.04038497348752399,    0.40611568955250277,
        2.5487608143054766e-05, 6.357763466671481e-06,  0.1983673899394051,
        6.012509955624177e-06,  1.0000000000000000,     2.5800320174775907e-07,
        0.00847892713458958,    0.03482284179005156,    0.7536912788603426,
        0.06829262746443235,    0.47553347916386945,    0.00021035200248015917,
        0.21780100344018763,    1.1288839454108412e-07, 0.06308940741186107,
        0.0006037963707988264,  0.9070914168873141,     0.0048878813531753286,
        0.00034468469797749025, 0.36130607250259605,    0.5404657888502823,
        0.1975078825956567,     0.0033396680861885082,  0.00012602318642319587,
        0.17236136319128323,    0.3765776359364778,     0.000535884024778516,
        0.6413524911495526,     2.5800320174775907e-07, 1.0000000000000000};

    data.n = 24;
    data.local_alpha.resize(data.n);
    data.local_kernel_data.resize(data.kernel_data.size());
    data.local_response.resize(data.n);
    data.local_gradient.resize(data.n);
    data.y = {1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0};
    data.first_diff = 0;
    data.alpha_diff.resize(data.n);
    // Expected alphas for SVC problem with C=3
    data.svc_alpha_expected = {
        0.0000000000000000,  0.3736457420941528,   0.0000000000000000,
        -0.6326254245260358, -0.18261456964972406, 0.9835190386500375,
        1.7011604991506692,  0.6578573964041795,   -3.0000000000000000,
        0.44395924132053016, 0.0000000000000000,   0.052798633472152606,
        -0.7767456880898906, 3.0000000000000000,   -3.0000000000000000,
        -0.675528239520911,  0.0000000000000000,   0.4962764263318035,
        3.0000000000000000,  -1.2303823212399227,  0.015055661283053965,
        -1.6758245299432948, 0.44944813426319874,  0.0000000000000000};
    // Expected alphas for nuSVC problem with nu=0.3
    data.nusvc_alpha_expected = {
        0.0000000000000000,  0.49732844836055223,  0.0000000000000000,
        -0.6343326431749844, -0.08877989304856161, 1.0012961125780442,
        1.5796338953249962,  0.660019260228863,    -3.210141394722615,
        0.4051263576768389,  0.0000000000000000,   0.011804085830700327,
        -0.7721155851846854, 3.210141394722615,    -3.210141394722615,
        -0.6637544473677753, 0.0000000000000000,   0.4957656001269409,
        3.210141394722615,   -1.3167732315157483,  0.03235616668080493,
        -1.6604704312644252, 0.45289630474843984,  0.0000000000000000};
    data.idx.resize(data.n);
    std::iota(data.idx.begin(), data.idx.end(), 0);
    data.tol = 1e-4;
    data.C = 3;
    data.nu = 0.3;
    data.svc_expected_bias = T(-0.09201195388907656);
    data.nusvc_expected_bias = T(-0.09667209439059264);
    params.push_back(data);
}

template <typename T>
void set_linear_kernel_data(std::vector<test_local_smo_type<T>> &params) {
    test_local_smo_type<T> data;
    data.kernel_data = {
        2.97878643712788,      2.9377143793157727,    -0.4733509109817569,
        -0.6209301004123478,   1.2287303807274665,    4.438808871201556,
        2.0741937641781583,    2.7790481913594065,    3.004008324391995,
        3.5643285319501965,    0.11139324453790837,   2.7985967340753346,
        -0.3218717021099828,   1.6895420311058498,    1.413235719350349,
        -1.487352255304147,    3.0140672788414022,    2.6374966685672137,
        2.0088701606115045,    0.9440634929598059,    3.1170963013926607,
        1.1967326789782335,    3.3999932908534896,    0.22526768729026894,
        2.9377143793157727,    3.3895611051313916,    0.6304033587184821,
        -0.3535956137869645,   1.7721371993018016,    4.251540434994992,
        2.62725084864331,      2.764413320183114,     3.622895733336412,
        3.6484851738758746,    0.8919865857557732,    2.4401723512400357,
        -0.6373161485316994,   2.612097934561396,     2.0626387372895008,
        -0.06929616696279978,  3.051171386282867,     2.7903064611025776,
        2.3135099208446976,    2.213093595313889,     3.2240060025193737,
        2.1922054571178884,    3.108340615637323,     1.1369998313353549,
        -0.4733509109817569,   0.6304033587184821,    2.7684015884213102,
        1.6599901057412942,    1.6072167356682239,    -0.9009372043477786,
        1.1339045822994624,    -1.7669267911347577,   1.256026338795354,
        -0.6845641336035029,   2.2054140425059234,    -0.8174093609366508,
        0.787337304532608,     1.9291538108388355,    1.6949670043143077,
        3.509960128090376,     -0.5865104487007294,   -0.8519944096851931,
        0.7983213623179308,    2.7056075806567104,    -0.7368208638829848,
        2.2620806106879523,    -2.2234438263779484,   2.363774720450977,
        -0.6209301004123478,   -0.3535956137869645,   1.6599901057412942,
        4.175263111190055,     2.2370781902135115,    -0.6525654036338616,
        0.537521006798718,     -6.0390405550393975,   0.7606780661299819,
        -2.3217603111631258,   2.294288299001301,     0.5989226242325966,
        5.6529574993630645,    0.5013829596455457,    1.7600376597686014,
        1.6763927111067907,    -1.7101166168098638,   -3.8432982165426286,
        1.2525937012183832,    0.471204374981709,     -2.856298715478134,
        1.0647759015909923,    -5.354899816716384,    1.8666149706605142,
        1.2287303807274665,    1.7721371993018016,    1.6072167356682239,
        2.2370781902135115,    2.3810211210968184,    1.8781226643855515,
        1.89107985545091,      -1.904006120581767,    2.5753771561028986,
        0.6947487372184757,    2.0081808318172207,    1.549792039989172,
        2.738937819357527,     1.973850685529648,     2.3019414342961393,
        1.3323401908387713,    0.7011893657096433,    -0.6047732917261145,
        2.0485388275010856,    1.8452460335012981,    0.17121856678321978,
        2.0853372036575313,    -1.4165386994873206,   1.9398117108700985,
        4.438808871201556,     4.251540434994992,     -0.9009372043477786,
        -0.6525654036338616,   1.8781226643855515,    6.676112252840687,
        2.9994893121723316,    3.660690438685816,     4.397471329685885,
        5.1342697763229115,    0.13100960566134046,   4.369267714071489,
        0.10111794240527011,   2.306374034261049,     2.082301239342772,
        -2.519424551910171,    4.373866237913262,     3.5876477071917745,
        3.038158850706061,     1.0780172532450971,    4.408403860158151,
        1.592013744483425,     4.737489171624693,     0.22565215820179407,
        2.0741937641781583,    2.62725084864331,      1.1339045822994624,
        0.537521006798718,     1.89107985545091,      2.9994893121723316,
        2.2442916186421837,    1.0335055673528768,    3.048469904237361,
        2.3593056727165496,    1.3254130697905517,    1.800271357175377,
        0.3754249669189462,    2.3544277802919042,    2.063588045500525,
        0.7226933361254112,    2.0008924694663746,    1.483662564901303,
        2.04568477884288,      2.170969212057792,     1.9593612778802898,
        2.161740987090476,     1.3109083859081847,    1.4810192245470488,
        2.7790481913594065,    2.764413320183114,     -1.7669267911347577,
        -6.0390405550393975,   -1.904006120581767,    3.660690438685816,
        1.0335055673528768,    10.252732459925163,    1.379009861577803,
        5.639451890268053,     -2.5267005419399853,   0.7055434099157563,
        -8.368966833533461,    1.1228701844781854,    -1.0329707582705154,
        -2.2046954384470663,   4.387746059394169,     7.218504297448581,
        -0.2045899852061475,   0.9505885748517979,    6.113827034989007,
        0.070176460962277,     9.482965077280161,     -1.7511067067557105,
        3.004008324391995,     3.622895733336412,     1.256026338795354,
        0.7606780661299819,    2.5753771561028986,    4.397471329685885,
        3.048469904237361,     1.379009861577803,     4.191539566259652,
        3.334775476064097,     1.6682874427707097,    2.7524885582365584,
        0.7766744699054445,    3.0671512206690283,    2.7751987182304974,
        0.542377269532261,     2.846375533155732,     2.0111852511511885,
        2.8696279447428994,    2.6698946770566785,    2.7367286019208352,
        2.772118951369805,     1.8990745373265256,    1.8351287323278989,
        3.5643285319501965,    3.6484851738758746,    -0.6845641336035029,
        -2.3217603111631258,   0.6947487372184757,    5.1342697763229115,
        2.3593056727165496,    5.639451890268053,     3.334775476064097,
        4.996402406484902,     -0.45892558629837166,  2.6926417418273316,
        -2.8982986620431412,   2.1274234847593343,    1.1539232311305623,
        -1.6677920232087124,   4.101503560657117,     4.638026527587766,
        1.8625635993149607,    1.4792056311734614,    4.73416283564299,
        1.3760297657207443,    5.907172040228153,     -0.0869754265218853,
        0.11139324453790837,   0.8919865857557732,    2.2054140425059234,
        2.294288299001301,     2.0081808318172207,    0.13100960566134046,
        1.3254130697905517,    -2.5267005419399853,   1.6682874427707097,
        -0.45892558629837166,  2.1761998250546224,    0.255029465058826,
        2.28546232554204,      1.7395214961812187,    1.9458342911697664,
        2.472540091590759,     -0.3099891294174514,   -1.2552524997258114,
        1.3328394216913015,    2.069064226367539,     -0.7596505760647493,
        2.0338069492849433,    -2.464437686902527,    2.1603040366424855,
        2.7985967340753346,    2.4401723512400357,    -0.8174093609366508,
        0.5989226242325966,    1.549792039989172,     4.369267714071489,
        1.800271357175377,     0.7055434099157563,    2.7524885582365584,
        2.6926417418273316,    0.255029465058826,     3.3034813009157173,
        1.8927376435955847,    1.0960161631485301,    1.481445571010818,
        -2.0870192916182577,   2.392715439955322,     1.1831919346083417,
        2.1883892784663663,    0.05211294002072492,   2.041857058939334,
        0.7371680702353,       1.7930483366082395,    0.11220263110435827,
        -0.3218717021099828,   -0.6373161485316994,   0.787337304532608,
        5.6529574993630645,    2.738937819357527,     0.10111794240527011,
        0.3754249669189462,    -8.368966833533461,    0.7766744699054445,
        -2.8982986620431412,   2.28546232554204,      1.8927376435955847,
        8.710609451060199,     -0.27251509550439246,  1.9190799606289142,
        0.18256333443342274,   -2.0297414703547463,   -5.401204536483252,
        1.7696261777980746,    -0.9435381515531392,   -3.7974440034433647,
        0.36458241344049835,   -6.85667695400334,     1.4898246325626807,
        1.6895420311058498,    2.612097934561396,     1.9291538108388355,
        0.5013829596455457,    1.973850685529648,     2.306374034261049,
        2.3544277802919042,    1.1228701844781854,    3.0671512206690283,
        2.1274234847593343,    1.7395214961812187,    1.0960161631485301,
        -0.27251509550439246,  2.807852002728193,     2.241831117897054,
        1.898798320215568,     1.758274950531025,     1.5500675073858083,
        1.9143106906059029,    2.9978562907288855,    1.8475957097564244,
        2.6941896832092653,    1.046371578524313,     2.015871230455152,
        1.413235719350349,     2.0626387372895008,    1.6949670043143077,
        1.7600376597686014,    2.3019414342961393,    2.082301239342772,
        2.063588045500525,     -1.0329707582705154,   2.7751987182304974,
        1.1539232311305623,    1.9458342911697664,    1.481445571010818,
        1.9190799606289142,    2.241831117897054,     2.321045923198265,
        1.4682137075189072,    1.0476003764021697,    0.030401596182840097,
        2.056507396654774,     2.187090172314279,     0.6870315526835654,
        2.2833790453487346,    -0.6872427620839692,   1.9738211378502157,
        -1.487352255304147,    -0.06929616696279978,  3.509960128090376,
        1.6763927111067907,    1.3323401908387713,    -2.519424551910171,
        0.7226933361254112,    -2.2046954384470663,   0.542377269532261,
        -1.6677920232087124,   2.472540091590759,     -2.0870192916182577,
        0.18256333443342274,   1.898798320215568,     1.4682137075189072,
        4.811715684987193,     -1.463187735783501,    -1.3282577485038882,
        0.1821483536804472,    3.166778395718878,     -1.5002560205977995,
        2.4013803956223576,    -3.122484088352479,    2.7158295966044625,
        3.0140672788414022,    3.051171386282867,     -0.5865104487007294,
        -1.7101166168098638,   0.7011893657096433,    4.373866237913262,
        2.0008924694663746,    4.387746059394169,     2.846375533155732,
        4.101503560657117,     -0.3099891294174514,   2.392715439955322,
        -2.0297414703547463,   1.758274950531025,     1.0476003764021697,
        -1.463187735783501,    3.3849890057001315,    3.67365025738614,
        1.6558111487766498,    1.1617508932604816,    3.834466684365439,
        1.1478405732105885,    4.698905293790754,     -0.03748727742085584,
        2.6374966685672137,    2.7903064611025776,    -0.8519944096851931,
        -3.8432982165426286,   -0.6047732917261145,   3.5876477071917745,
        1.483662564901303,     7.218504297448581,     2.0111852511511885,
        4.638026527587766,     -1.2552524997258114,   1.1831919346083417,
        -5.401204536483252,    1.5500675073858083,    0.030401596182840097,
        -1.3282577485038882,   3.67365025738614,      5.352383371871481,
        0.6075913003697546,    1.3335572483459401,    4.800746307242136,
        0.7695196013673897,    6.836692624999984,     -0.6923704925283283,
        2.0088701606115045,    2.3135099208446976,    0.7983213623179308,
        1.2525937012183832,    2.0485388275010856,    3.038158850706061,
        2.04568477884288,      -0.2045899852061475,   2.8696279447428994,
        1.8625635993149607,    1.3328394216913015,    2.1883892784663663,
        1.7696261777980746,    1.9143106906059029,    2.056507396654774,
        0.1821483536804472,    1.6558111487766498,    0.6075913003697546,
        2.152018007124731,     1.4998205973779233,    1.3285056681630552,
        1.7896352347624558,    0.3984094582493273,    1.3178881208092035,
        0.9440634929598059,    2.213093595313889,     2.7056075806567104,
        0.471204374981709,     1.8452460335012981,    1.0780172532450971,
        2.170969212057792,     0.9505885748517979,    2.6698946770566785,
        1.4792056311734614,    2.069064226367539,     0.05211294002072492,
        -0.9435381515531392,   2.9978562907288855,    2.187090172314279,
        3.166778395718878,     1.1617508932604816,    1.3335572483459401,
        1.4998205973779233,    3.6375590592370313,    1.3816038228171723,
        3.013212034626975,     0.4469221245290735,    2.4514241511833057,
        3.1170963013926607,    3.2240060025193737,    -0.7368208638829848,
        -2.856298715478134,    0.17121856678321978,   4.408403860158151,
        1.9593612778802898,    6.113827034989007,     2.7367286019208352,
        4.73416283564299,      -0.7596505760647493,   2.041857058939334,
        -3.7974440034433647,   1.8475957097564244,    0.6870315526835654,
        -1.5002560205977995,   3.834466684365439,     4.800746307242136,
        1.3285056681630552,    1.3816038228171723,    4.643242264876587,
        1.1030847541018978,    6.123863445236815,     -0.3232151176640402,
        1.1967326789782335,    2.1922054571178884,    2.2620806106879523,
        1.0647759015909923,    2.0853372036575313,    1.592013744483425,
        2.161740987090476,     0.070176460962277,     2.772118951369805,
        1.3760297657207443,    2.0338069492849433,    0.7371680702353,
        0.36458241344049835,   2.6941896832092653,    2.2833790453487346,
        2.4013803956223576,    1.1478405732105885,    0.7695196013673897,
        1.7896352347624558,    3.013212034626975,     1.1030847541018978,
        2.7173342286181885,    -0.041107474815942735, 2.257539227692329,
        3.3999932908534896,    3.108340615637323,     -2.2234438263779484,
        -5.354899816716384,    -1.4165386994873206,   4.737489171624693,
        1.3109083859081847,    9.482965077280161,     1.8990745373265256,
        5.907172040228153,     -2.464437686902527,    1.7930483366082395,
        -6.85667695400334,     1.046371578524313,     -0.6872427620839692,
        -3.122484088352479,    4.698905293790754,     6.836692624999984,
        0.3984094582493273,    0.4469221245290735,    6.123863445236815,
        -0.041107474815942735, 9.222119088462621,     -1.8531272309908644,
        0.22526768729026894,   1.1369998313353549,    2.363774720450977,
        1.8666149706605142,    1.9398117108700985,    0.22565215820179407,
        1.4810192245470488,    -1.7511067067557105,   1.8351287323278989,
        -0.0869754265218853,   2.1603040366424855,    0.11220263110435827,
        1.4898246325626807,    2.015871230455152,     1.9738211378502157,
        2.7158295966044625,    -0.03748727742085584,  -0.6923704925283283,
        1.3178881208092035,    2.4514241511833057,    -0.3232151176640402,
        2.257539227692329,     -1.8531272309908644,   2.241920291782408};

    data.n = 24;
    data.local_alpha.resize(data.n);
    data.local_kernel_data.resize(data.kernel_data.size());
    data.local_response.resize(data.n);
    data.local_gradient.resize(data.n);
    data.y = {1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0};
    data.first_diff = 0;
    data.alpha_diff.resize(data.n);
    // Expected alphas for SVC problem with C=100
    data.svc_alpha_expected = {
        0.0000000000000000, 0.0000000000000000, -7.099655087028314, 0.0000000000000000,
        0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
        -43.03099966182858, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
        0.0000000000000000, 100.00000000000000, 0.0000000000000000, 0.0000000000000000,
        0.0000000000000000, 0.0000000000000000, 0.0000000000000000, -49.869345251143116,
        0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000};
    data.alpha_diff.resize(data.n);
    // Expected alphas for nuSVC problem with nu=0.5
    data.nusvc_alpha_expected = {
        0.149953799006922,    0.149953799006922,  0.0000000000000000,
        0.0000000000000000,   -0.149953799006922, 0.0000000000000000,
        0.149953799006922,    0.0000000000000000, -0.149953799006922,
        0.0000000000000000,   0.0000000000000000, 0.149953799006922,
        -0.05399623366957405, 0.149953799006922,  -0.149953799006922,
        0.0000000000000000,   0.0000000000000000, 0.0000000000000000,
        0.149953799006922,    -0.149953799006922, 0.0000000000000000,
        -0.149953799006922,   0.0000000000000000, -0.09595756533734795};
    data.idx.resize(data.n);
    std::iota(data.idx.begin(), data.idx.end(), 0);
    data.tol = 1e-4;
    data.C = 100;
    data.nu = 0.5;
    data.svc_expected_bias = T(14.714238368551724);
    data.nusvc_expected_bias = T(-0.07934702777642594);
    params.push_back(data);
}

template <typename T>
void set_polynomial_kernel_data(std::vector<test_local_smo_type<T>> &params) {
    test_local_smo_type<T> data;
    data.kernel_data = {
        4.90774108246288,       4.731962177096737,      -1.898171863476816e-05,
        -0.0010140164882706912, 0.560220420201734,      14.33835934086665,
        1.9395482156758264,     4.092346141839961,      5.017812725579131,
        7.906339102963333,      0.018756772034226134,   4.167827269004577,
        0.00011811167003268588, 1.1734769446985966,     0.7701316018892969,
        -0.15199640957535498,   5.06216633484737,       3.572794116214373,
        1.791112692337173,      0.3172588682112257,     5.531598693659882,
        0.5282319469538346,     6.967834286608403,      0.03358379468616039,
        4.731962177096737,      6.910903759531868,      0.14486995269081385,
        3.660162046824259e-05,  1.316779960468131,      12.743547728353906,
        3.5369965239886447,     4.036438209670977,      8.260144332180436,
        8.417986523124776,      0.2822917571402257,     2.924735693435322,
        -0.0012828799317009558, 3.484493724945291,      1.912716461510243,
        0.005391772392478502,   5.228031365115682,      4.135704415250531,
        2.5531244009373846,     2.281964600975733,      6.048494137750522,
        2.2280863099334423,     5.490621735972386,      0.4718193082931051,
        -1.898171863476816e-05, 0.14486995269081385,    4.05162333228735,
        1.1248479476310351,     1.0413831866296623,     -0.013905132661905592,
        0.46901102865616884,    -0.30545130652319685,   0.5885082168275199,
        -0.002314743724728398,  2.2620563762523487,     -0.007845566194457174,
        0.21998642004104568,    1.620482601065123,      1.1825535113161836,
        7.587076195721558,      -0.0005770779580019522, -0.010077304772471297,
        0.22604535694118372,    3.8169227250746856,     -0.0039751299854767635,
        2.4117122685383245,     -0.7331922596142362,    2.696573566874367,
        -0.0010140164882706912, 3.660162046824259e-05,  1.1248479476310351,
        12.129451479756632,     2.3448929285150917,     -0.0015723359418099011,
        0.10973747039195916,    -22.176679129886217,    0.20573325571859155,
        -0.8597602297393812,    2.4996427094560936,     0.13223110567052176,
        27.996951076248546,     0.09777561156131986,    1.295096116516046,
        1.151669687495222,      -0.2684089048414323,    -5.014691428306301,
        0.584899680141916,      0.08847935386274895,    -1.8075970408872675,
        0.40915959830965815,    -15.022597608112616,    1.4944766729382053,
        0.560220420201734,      1.316779960468131,      1.0413831866296623,
        2.3448929285150917,     2.7470031909804438,     1.517153874433301,
        1.5429607165328034,     -0.40852354267881746,   3.359421931519524,
        0.1731573697061614,     1.789588137587561,      0.9553690049456091,
        3.940335895166243,      1.714751484339325,      2.5208461607763764,
        0.6726130334670437,     0.17617607196825674,    -0.0007885470301828458,
        1.8803119269400324,     1.452968332248839,      0.025831772422878926,
        1.965660795460567,      -0.12370649984965225,   1.642638770698178,
        14.33835934086665,      12.743547728353906,     -0.013905132661905592,
        -0.0015723359418099011, 1.517153874433301,      44.66542223485578,
        4.997971381046662,      8.493974723853016,      13.975502400370495,
        21.418592247422833,     0.020911612502210877,   13.731480222587198,
        0.017689603244612464,   2.533181593903653,      1.9585234959540623,
        -1.1566736134707727,    13.771071988191444,     8.045974030200425,
        5.169455833942468,      0.4202042677988483,     14.070864418911516,
        1.018129081010575,      17.148454579766714,     0.0336438613250679,
        1.9395482156758264,     3.5369965239886447,     0.46901102865616884,
        0.10973747039195916,    1.5429607165328034,     4.997971381046662,
        2.3640425481502056,     0.38384873328986513,    5.21583452225403,
        2.683607237920844,      0.6646678677272408,     1.3681325700670726,
        0.06290825936889408,    2.669502219067916,      1.914911446802082,
        0.18650870091335134,    1.7735217197327717,     0.8623427611234495,
        1.873797587996688,      2.174186376755702,      1.6838026224864524,
        2.1510376981128934,     0.6482346759886898,     0.8587555155212235,
        4.092346141839961,      4.036438209670977,      -0.30545130652319685,
        -22.176679129886217,    -0.40852354267881746,   8.493974723853016,
        0.38384873328986513,    151.96265808602226,     0.7277976434482065,
        27.810579471736542,     -1.1687414154318023,    0.1782365476628423,
        -62.78300054329609,     0.45909035894251904,    -0.028789179270765602,
        -0.7105626145984321,    13.8910340138475,       55.71023557408108,
        0.0012494177878488207,  0.32183356405119706,    34.866866077979395,
        0.014722018826271936,   121.39638535146838,     -0.29481435613092466,
        5.017812725579131,      8.260144332180436,      0.5885082168275199,
        0.20573325571859155,    3.359421931519524,      13.975502400370495,
        5.21583452225403,       0.7277976434482065,     12.258796354090533,
        6.617012132942572,      1.1383631900326532,     3.99126171608633,
        0.2142091857694323,     5.300567336904424,      4.077590726937989,
        0.11141562053746958,    4.356205454930462,      1.7962392014216184,
        4.4499011095349035,     3.6875765251056043,     3.932074600300218,
        4.065811245185659,      1.5590287911793883,     1.4335869135536021,
        7.906339102963333,      8.417986523124776,      -0.002314743724728398,
        -0.8597602297393812,    0.1731573697061614,     21.418592247422833,
        2.683607237920844,      27.810579471736542,     6.617012132942572,
        19.862905670373614,     -7.372512217886677e-06, 3.769618713002936,
        -1.9027027254530093,    2.0663955494792754,     0.48737208409171556,
        -0.2428491724852828,    11.554699211920756,     16.17533638968497,
        1.4865471017060325,     0.8563000727414709,     17.115296154163918,
        0.7241867973911296,     31.66204364190959,      0.004616776548563849,
        0.018756772034226134,   0.2822917571402257,     2.2620563762523487,
        2.4996427094560936,     1.789588137587561,      0.020911612502210877,
        0.6646678677272408,     -1.1687414154318023,    1.1383631900326532,
        -7.372512217886677e-06, 2.1873806299498955,     0.03844839397629906,
        2.4753378627858087,     1.2588749951673477,     1.6552476498351265,
        3.0251587815900534,     0.00016642433014296942, -0.07283889776114306,
        0.673188067104717,      1.9276062337695896,     -0.004897868034452459,
        1.846848152120527,      -1.0681485302988003,    2.1474480105026887,
        4.167827269004577,      2.924735693435322,      -0.007845566194457174,
        0.13223110567052176,    0.9553690049456091,     13.731480222587198,
        1.3681325700670726,     0.1782365476628423,     3.99126171608633,
        3.769618713002936,      0.03844839397629906,    6.452938774887169,
        1.5462834973384647,     0.43553344229342766,    0.8593334310273192,
        -0.5790710990823148,    2.7815534169854437,     0.5150703743570412,
        2.2183355152102653,     0.013153693718985861,   1.8650844989006667,
        0.1936864940261779,     1.3548234723914914,     0.01884261024201316,
        0.00011811167003268588, -0.0012828799317009558, 0.21998642004104568,
        27.996951076248546,     3.940335895166243,      0.017689603244612464,
        0.06290825936889408,    -62.78300054329609,     0.2142091857694323,
        -1.9027027254530093,    2.4753378627858087,     1.5462834973384647,
        95.15011412836876,      0.0004010077138910751,  1.5997245798396023,
        0.0273475306576384,     -0.5214088648409793,    -15.44945407976413,
        1.3122601565089451,     -0.017937215214739885,  -4.815867005992132,
        0.06037063171946805,    -33.33459265820824,     0.8707439877961589,
        1.1734769446985966,     3.484493724945291,      1.620482601065123,
        0.09777561156131986,    1.714751484339325,      2.533181593903653,
        2.669502219067916,      0.45909035894251904,    5.300567336904424,
        2.0663955494792754,     1.2588749951673477,     0.43553344229342766,
        0.0004010077138910751,  4.203885272061806,      2.357498942049884,
        1.5584717856160388,     1.2919571351601524,     0.9557698743967985,
        1.589959236668326,      4.990814262064283,      1.4574943938097746,
        3.775245494011738,      0.39413238049134963,    1.806645698081644,
        0.7701316018892969,     1.912716461510243,      1.1825535113161836,
        1.295096116516046,      2.5208461607763764,     1.9585234959540623,
        1.914911446802082,      -0.028789179270765602,  4.077590726937989,
        0.48737208409171556,    1.6552476498351265,     0.8593334310273192,
        1.5997245798396023,     2.357498942049884,      2.5742987640583683,
        0.841518080031573,      0.39512404248972405,    0.011421148434145198,
        1.8985799987177598,     2.2150226451499084,     0.16958600561498666,
        2.4696240307166355,     -0.0023857661273245,    1.7146879887728497,
        -0.15199640957535498,   0.005391772392478502,   7.587076195721558,
        1.151669687495222,      0.6726130334670437,     -1.1566736134707727,
        0.18650870091335134,    -0.7105626145984321,    0.11141562053746958,
        -0.2428491724852828,    3.0251587815900534,     -0.5790710990823148,
        0.0273475306576384,     1.5584717856160388,     0.841518080031573,
        17.899562508675018,     -0.14190491273004963,   -0.09365637575895774,
        0.0272910674566013,     5.767978708890496,      -0.15757600995792653,
        2.8073395621918737,     -2.467172126278289,     3.8544940293303416,
        5.06216633484737,       5.228031365115682,      -0.0005770779580019522,
        -0.2684089048414323,    0.17617607196825674,    13.771071988191444,
        1.7735217197327717,     13.8910340138475,       4.356205454930462,
        11.554699211920756,     0.00016642433014296942, 2.7815534169854437,
        -0.5214088648409793,    1.2919571351601524,     0.39512404248972405,
        -0.14190491273004963,   6.88605094989184,       8.575159768813855,
        1.1180816848379562,     0.4946799157808698,     9.62598974085635,
        0.4817433299956226,     16.76645690080948,      0.0069959656236594685,
        3.572794116214373,      4.135704415250531,      -0.010077304772471297,
        -5.014691428306301,     -0.0007885470301828458, 8.045974030200425,
        0.8623427611234495,     55.71023557408108,      1.7962392014216184,
        16.17533638968497,      -0.07283889776114306,   0.5150703743570412,
        -15.44945407976413,     0.9557698743967985,     0.011421148434145198,
        -0.09365637575895774,   8.575159768813855,      24.04227242830836,
        0.1356348431723401,     0.6740154622218404,     17.787207969675773,
        0.21038986828412184,    47.766805351711895,     -0.0025257489520636657,
        1.791112692337173,      2.5531244009373846,     0.22604535694118372,
        0.584899680141916,      1.8803119269400324,     5.169455833942468,
        1.873797587996688,      0.0012494177878488207,  4.4499011095349035,
        1.4865471017060325,     0.673188067104717,      2.2183355152102653,
        1.3122601565089451,     1.589959236668326,      1.8985799987177598,
        0.0272910674566013,     1.1180816848379562,     0.1356348431723401,
        2.1268263264790233,     0.8844880169879359,     0.668207193288286,
        1.3485646540509106,     0.06852072231518538,    0.6561081869553476,
        0.3172588682112257,     2.281964600975733,      3.8169227250746856,
        0.08847935386274895,    1.452968332248839,      0.4202042677988483,
        2.174186376755702,      0.32183356405119706,    3.6875765251056043,
        0.8563000727414709,     1.9276062337695896,     0.013153693718985861,
        -0.017937215214739885,  4.990814262064283,      2.2150226451499084,
        5.767978708890496,      0.4946799157808698,     0.6740154622218404,
        0.8844880169879359,     8.350347760343904,      0.7309503815056925,
        5.058385124416312,      0.08144234554611597,    2.9593890297990684,
        5.531598693659882,      6.048494137750522,      -0.0039751299854767635,
        -1.8075970408872675,    0.025831772422878926,   14.070864418911516,
        1.6838026224864524,     34.866866077979395,     3.932074600300218,
        17.115296154163918,     -0.004897868034452459,  1.8650844989006667,
        -4.815867005992132,     1.4574943938097746,     0.16958600561498666,
        -0.15757600995792653,   9.62598974085635,       17.787207969675773,
        0.668207193288286,      0.7309503815056925,     16.22542707118747,
        0.441654058576572,      35.02778676409524,      0.00011332679124309572,
        0.5282319469538346,     2.2280863099334423,     2.4117122685383245,
        0.40915959830965815,    1.965660795460567,      1.018129081010575,
        2.1510376981128934,     0.014722018826271936,   4.065811245185659,
        0.7241867973911296,     1.846848152120527,      0.1936864940261779,
        0.06037063171946805,    3.775245494011738,      2.4696240307166355,
        2.8073395621918737,     0.4817433299956226,     0.21038986828412184,
        1.3485646540509106,     5.058385124416312,      0.441654058576572,
        3.8600450755253637,     0.006799204845243585,   2.3994822396812503,
        6.967834286608403,      5.490621735972386,      -0.7331922596142362,
        -15.022597608112616,    -0.12370649984965225,   17.148454579766714,
        0.6482346759886898,     121.39638535146838,     1.5590287911793883,
        31.66204364190959,      -1.0681485302988003,    1.3548234723914914,
        -33.33459265820824,     0.39413238049134963,    -0.0023857661273245,
        -2.467172126278289,     16.76645690080948,      47.766805351711895,
        0.06852072231518538,    0.08144234554611597,    35.02778676409524,
        0.006799204845243585,   112.05403150067531,     -0.3679292011142109,
        0.03358379468616039,    0.4718193082931051,     2.696573566874367,
        1.4944766729382053,     1.642638770698178,      0.0336438613250679,
        0.8587555155212235,     -0.29481435613092466,   1.4335869135536021,
        0.004616776548563849,   2.1474480105026887,     0.01884261024201316,
        0.8707439877961589,     1.806645698081644,      1.7146879887728497,
        3.8544940293303416,     0.0069959656236594685,  -0.0025257489520636657,
        0.6561081869553476,     2.9593890297990684,     0.00011332679124309572,
        2.3994822396812503,     -0.3679292011142109,    2.3577358853877195};

    data.n = 24;
    data.local_alpha.resize(data.n);
    data.local_kernel_data.resize(data.kernel_data.size());
    data.local_response.resize(data.n);
    data.local_gradient.resize(data.n);
    data.y = {1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0};
    data.first_diff = 0;
    data.alpha_diff.resize(data.n);
    // Expected alphas for SVC problem with C=1.5
    data.svc_alpha_expected = {
        0.0000000000000000,    0.0000000000000000,   -0.02108911020601875,
        -0.038577839011240976, -0.24469801088000107, 0.0000000000000000,
        1.5000000000000000,    0.0000000000000000,   -1.1580368361159936,
        0.0000000000000000,    -0.4483183837806475,  0.0000000000000000,
        0.0000000000000000,    1.5000000000000000,   -1.5000000000000000,
        0.0000000000000000,    0.0000000000000000,   0.0000000000000000,
        1.5000000000000000,    -0.3575682670591702,  0.0000000000000000,
        -0.7317115529469275,   0.0000000000000000,   0.0000000000000000};
    // Expected alphas for nuSVC problem with nu=0.6
    data.nusvc_alpha_expected = {
        0.058384330633797346,  0.058384330633797346,  -0.030754434158925315,
        -0.012633451217679769, -0.058384330633797346, 0.0000000000000000,
        0.058384330633797346,  0.0000000000000000,    -0.058384330633797346,
        0.0000000000000000,    -0.058384330633797346, 0.058384330633797346,
        0.0000000000000000,    0.058384330633797346,  -0.058384330633797346,
        0.0000000000000000,    0.058384330633797346,  0.011676866126759325,
        0.058384330633797346,  -0.026673311383951587, 0.0000000000000000,
        -0.058384330633797346, 0.0000000000000000,    -0.058384330633797346};
    data.idx.resize(data.n);
    std::iota(data.idx.begin(), data.idx.end(), 0);
    data.tol = 1e-4;
    data.C = 1.5;
    data.nu = 0.6;
    data.svc_expected_bias = T(2.5092851568783145);
    data.nusvc_expected_bias = T(-0.3078973888753256);
    params.push_back(data);
}

template <typename T>
void set_sigmoid_kernel_data(std::vector<test_local_smo_type<T>> &params) {
    test_local_smo_type<T> data;
    data.kernel_data = {
        0.9980828188425107,    0.9978844187473215,    -0.5836766539255601,
        -0.6885093987680353,   0.8797083741599535,    0.9999422867034037,
        0.983315830249678,     0.9969054628927849,    0.9981953264136267,
        0.9995293880221963,    0.033659173523564304,  0.9970470852029681,
        -0.4512318888651222,   0.9585268192180081,    0.921046456727374,
        -0.9549190989301388,   0.998238334322212,     0.9956562578550355,
        0.9805115484359663,    0.7750593170121256,    0.9986239967549969,
        0.8707272989632612,    0.9993019262594439,    0.16869314630666918,
        0.9978844187473215,    0.9992842341135864,    0.576018792071765,
        -0.4810232671273132,   0.9658571108741408,    0.9999095393035353,
        0.9955483619793736,    0.9967950172300903,    0.9995910865577963,
        0.9996154395389439,    0.7488729415039476,    0.9930342876259697,
        -0.6987119433381312,   0.9953838700359858,    0.9828506913327018,
        -0.18113447589935938,  0.9983883073513923,    0.9969878330576732,
        0.9905713476467618,    0.9880172461897527,    0.9989352334976771,
        0.9874050996274933,    0.998594796498361,     0.8522725565075633,
        -0.5836766539255601,   0.576018792071765,     0.9968255000105012,
        0.9555462817942229,    0.949694824058962,     -0.8278059085921217,
        0.8512529845196835,    -0.9766975494664679,   0.8869048065478093,
        -0.7265953760097099,   0.9877957052805332,    -0.7935293641289165,
        0.6883456049722333,    0.976450869947891,     0.9590523135624573,
        0.9994638117559276,    -0.6661627968957722,   -0.8083997736315336,
        0.6952183646151359,    0.996310106428702,     -0.754871870443473,
        0.9893392967735946,    -0.9921485062259697,   0.9916383686073712,
        -0.6885093987680353,   -0.4810232671273132,   0.9555462817942229,
        0.9998913673557588,    0.9886837402736317,    -0.7079582026057735,
        0.4967824304187768,    -0.9999991689289672,   0.671139499820144,
        -0.9937936700990541,   0.9901283943720462,    0.5502272295347559,
        0.9999968683557873,    0.46342130647488405,   0.9648687742645928,
        0.9572255606608479,    -0.9733389840309383,   -0.99983847478622,
        0.8860225591457543,    0.4345118274000794,    -0.998275524523387,
        0.8267348225796742,    -0.9999957073853102,   0.97268933983236,
        0.8797083741599535,    0.9658571108741408,    0.949694824058962,
        0.9886837402736317,    0.9919760427673486,    0.9734234116390658,
        0.974226666139538,     -0.983175436937103,    0.9949596580201371,
        0.6253228314848965,    0.9804795952131461,    0.9424751296052676,
        0.9965932904436745,    0.9788209010554777,    0.9903071855939287,
        0.904932660249398,     0.6300066912091998,    -0.678175444829262,
        0.9822656655676011,    0.971272805240106,     0.10507301773404752,
        0.9837525452439911,    -0.9467901080463329,   0.9770387657790127,
        0.9999422867034037,    0.9999095393035353,    -0.8278059085921217,
        -0.7079582026057735,   0.9734234116390658,    0.99999973126024,
        0.9981756650191717,    0.9996265388669637,    0.9999362674971978,
        0.9999891256713888,    0.057149187606668275,  0.9999318043263694,
        0.02133829139859665,   0.9904092616893428,    0.9836347010729796,
        -0.9961335049829592,   0.9999325528017668,    0.9995549971373462,
        0.9983372223564716,    0.8316984174042118,    0.9999379179167622,
        0.9478741548892943,    0.9999718183900517,    0.16914134724491794,
        0.983315830249678,     0.9955483619793736,    0.8512529845196835,
        0.4967824304187768,    0.974226666139538,     0.9981756650191717,
        0.9888768836863154,    0.8144836776204223,    0.9983778324050446,
        0.9915485824667309,    0.9034159097268636,    0.9680507845421601,
        0.33682772578669323,   0.9914494862835297,    0.9828893849157199,
        0.6453170261741777,    0.9801385597880703,    0.9329128035348676,
        0.9821448616133245,    0.9867508982194606,    0.9780796655380993,
        0.9864561962451279,    0.9001652794253993,    0.9325002580387732,
        0.9969054628927849,    0.9967950172300903,    -0.9766975494664679,
        -0.9999991689289672,   -0.983175436937103,    0.9996265388669637,
        0.8144836776204223,    0.9999999999497199,    0.9145759421329717,
        0.9999967651855008,    -0.9962003099149184,   0.6331473892403521,
        -0.999999996901579,    0.8475654060506949,    -0.8715677043531131,
        -0.9917886341576051,   0.9999347624921896,    0.9999999268872575,
        -0.33238578998196444,  0.7781668202774953,    0.9999989638910147,
        -0.015786935137263425, 0.9999999996810442,    -0.9758066947873516,
        0.9981953264136267,    0.9995910865577963,    0.8869048065478093,
        0.671139499820144,     0.9949596580201371,    0.9999362674971978,
        0.9983778324050446,    0.9145759421329717,    0.9998955288932667,
        0.9991836947547874,    0.9564036542462185,    0.9967021207210799,
        0.6815534641999657,    0.9984489010502201,    0.9968767856619684,
        0.5011590371330851,    0.9973665794196,       0.9806184838190247,
        0.9975093361430477,    0.9959805563778817,    0.996575210696975,
        0.9968536515339973,    0.9747102776461013,    0.9705771149967598,
        0.9995293880221963,    0.9996154395389439,    -0.7265953760097099,
        -0.9937936700990541,   0.6253228314848965,    0.9999891256713888,
        0.9915485824667309,    0.9999967651855008,    0.9991836947547874,
        0.9999848608456159,    -0.5721482126788826,   0.9961937010364328,
        -0.9984407487455499,   0.9853020214607154,    0.857734205486495,
        -0.9705304596722938,   0.9998703310898939,    0.999964220461405,
        0.972426174092552,     0.9322157959397899,    0.9999715925132285,
        0.9139891488127193,    0.9999982986126759,    -0.2015719231067854,
        0.033659173523564304,  0.7488729415039476,    0.9877957052805332,
        0.9901283943720462,    0.9804795952131461,    0.057149187606668275,
        0.9034159097268636,    -0.9962003099149184,   0.9564036542462185,
        -0.5721482126788826,   0.9869150994779059,    0.20316858728976486,
        0.9899181256509627,    0.9631283491732338,    0.9773645356435336,
        0.993553240164341,     -0.43980333897347407,  -0.9226118342508578,
        0.9050410924326973,    0.9831109089491886,    -0.7664150146938916,
        0.9816332861334348,    -0.9955892523874256,   0.9864097252887771,
        0.9970470852029681,    0.9930342876259697,    -0.7935293641289165,
        0.5502272295347559,    0.9424751296052676,    0.9999318043263694,
        0.9680507845421601,    0.6331473892403521,    0.9967021207210799,
        0.9961937010364328,    0.20316858728976486,   0.9991200522368724,
        0.9743276929022797,    0.8382383163342485,    0.9325669630408379,
        -0.9891235154682794,   0.9921972487348869,    0.8667417260476379,
        0.9872899516672466,    -0.03744695359945363,  0.9819815637193707,
        0.6553400250006105,    0.967501186675705,     0.034629304999102446,
        -0.4512318888651222,   -0.6987119433381312,   0.6883456049722333,
        0.9999968683557873,    0.9965932904436745,    0.02133829139859665,
        0.33682772578669323,   -0.999999996901579,    0.6815534641999657,
        -0.9984407487455499,   0.9899181256509627,    0.9743276929022797,
        0.9999999979640748,    -0.4028262952876603,   0.9758815281048363,
        0.11851637847505198,   -0.9875307106479911,   -0.9999961588763907,
        0.9656542733199882,    -0.8432295059296583,   -0.9998196856044917,
        0.3252426872397313,    -0.9999998832087363,   0.9338650866858925,
        0.9585268192180081,    0.9953838700359858,    0.976450869947891,
        0.46342130647488405,   0.9788209010554777,    0.9904092616893428,
        0.9914494862835297,    0.8475654060506949,    0.9984489010502201,
        0.9853020214607154,    0.9631283491732338,    0.8382383163342485,
        -0.4028262952876603,   0.9971118604527528,    0.9888113736636297,
        0.9746937191995608,    0.9647224637945203,    0.9425120551804878,
        0.9756072624336896,    0.9981685075223845,    0.971432040901957,
        0.9962077886663443,    0.8196158246529316,    0.9808331568222944,
        0.921046456727374,     0.9828506913327018,    0.9590523135624573,
        0.9648687742645928,    0.9903071855939287,    0.9836347010729796,
        0.9828893849157199,    -0.8715677043531131,   0.9968767856619684,
        0.857734205486495,     0.9773645356435336,    0.9325669630408379,
        0.9758815281048363,    0.9888113736636297,    0.9907395626964559,
        0.9304668078161238,    0.820099233913789,     -0.06343279997785917,
        0.9825986815452017,    0.9872505147539932,    0.6196506937713808,
        0.9898678473484219,    -0.7281092005371956,   0.978819415004644,
        -0.9549190989301388,   -0.18113447589935938,  0.9994638117559276,
        0.9572255606608479,    0.904932660249398,     -0.9961335049829592,
        0.6453170261741777,    -0.9917886341576051,   0.5011590371330851,
        -0.9705304596722938,   0.993553240164341,     -0.9891235154682794,
        0.11851637847505198,   0.9746937191995608,    0.9304668078161238,
        0.9999764169483654,    -0.9522915491375864,   -0.9346433195165986,
        0.11802536728266812,   0.9987785686514228,    -0.9562637518869407,
        0.9923572246553555,    -0.9990892754782211,   0.9963993676277707,
        0.998238334322212,     0.9983883073513923,    -0.6661627968957722,
        -0.9733389840309383,   0.6300066912091998,    0.9999325528017668,
        0.9801385597880703,    0.9999347624921896,    0.9973665794196,
        0.9998703310898939,    -0.43980333897347407,  0.9921972487348869,
        -0.9875307106479911,   0.9647224637945203,    0.820099233913789,
        -0.9522915491375864,   0.999276339594503,     0.9996379739786582,
        0.9551082478738562,    0.8601968384427721,    0.9997538811303853,
        0.8557929687038509,    0.9999690841321307,    -0.14397731527967478,
        0.9956562578550355,    0.9969878330576732,    -0.8083997736315336,
        -0.99983847478622,     -0.678175444829262,    0.9995549971373462,
        0.9329128035348676,    0.9999999268872575,    0.9806184838190247,
        0.999964220461405,     -0.9226118342508578,   0.8667417260476379,
        -0.9999961588763907,   0.9425120551804878,    -0.06343279997785917,
        -0.9346433195165986,   0.9996379739786582,    0.9999935573855726,
        0.5574387740517855,    0.9051967973525076,    0.9999757878518956,
        0.6769289277203404,    0.9999998172076834,    -0.7309874290107601,
        0.9805115484359663,    0.9905713476467618,    0.6952183646151359,
        0.8860225591457543,    0.9822656655676011,    0.9983372223564716,
        0.9821448616133245,    -0.33238578998196444,  0.9975093361430477,
        0.972426174092552,     0.9050410924326973,    0.9872899516672466,
        0.9656542733199882,    0.9756072624336896,    0.9825986815452017,
        0.11802536728266812,   0.9551082478738562,    0.5574387740517855,
        0.9861386493509816,    0.9353821526645468,    0.904095877694519,
        0.9672382598350577,    0.36104876692556076,   0.9017422405927186,
        0.7750593170121256,    0.9880172461897527,    0.996310106428702,
        0.4345118274000794,    0.971272805240106,     0.8316984174042118,
        0.9867508982194606,    0.7781668202774953,    0.9959805563778817,
        0.9322157959397899,    0.9831109089491886,    -0.03744695359945363,
        -0.8432295059296583,   0.9981685075223845,    0.9872505147539932,
        0.9987785686514228,    0.8601968384427721,    0.9051967973525076,
        0.9353821526645468,    0.9996052239710158,    0.9150835887663141,
        0.9982347178329992,    0.4105782769141273,    0.9932192456341211,
        0.9986239967549969,    0.9989352334976771,    -0.754871870443473,
        -0.998275524523387,    0.10507301773404752,   0.9999379179167622,
        0.9780796655380993,    0.9999989638910147,    0.996575210696975,
        0.9999715925132285,    -0.7664150146938916,   0.9819815637193707,
        -0.9998196856044917,   0.971432040901957,     0.6196506937713808,
        -0.9562637518869407,   0.9997538811303853,    0.9999757878518956,
        0.904095877694519,     0.9150835887663141,    0.999964665541989,
        0.840742719443943,     0.9999989885499805,    -0.45251481342055105,
        0.8707272989632612,    0.9874050996274933,    0.9893392967735946,
        0.8267348225796742,    0.9837525452439911,    0.9478741548892943,
        0.9864561962451279,    -0.015786935137263425, 0.9968536515339973,
        0.9139891488127193,    0.9816332861334348,    0.6553400250006105,
        0.3252426872397313,    0.9962077886663443,    0.9898678473484219,
        0.9923572246553555,    0.8557929687038509,    0.6769289277203404,
        0.9672382598350577,    0.9982347178329992,    0.840742719443943,
        0.9964123232017825,    -0.14822881250160294,  0.9892230963720113,
        0.9993019262594439,    0.998594796498361,     -0.9921485062259697,
        -0.9999957073853102,   -0.9467901080463329,   0.9999718183900517,
        0.9001652794253993,    0.9999999996810442,    0.9747102776461013,
        0.9999982986126759,    -0.9955892523874256,   0.967501186675705,
        -0.9999998832087363,   0.8196158246529316,    -0.7281092005371956,
        -0.9990892754782211,   0.9999690841321307,    0.9999998172076834,
        0.36104876692556076,   0.4105782769141273,    0.9999989885499805,
        -0.14822881250160294,  0.999999999403498,     -0.9810110492615833,
        0.16869314630666918,   0.8522725565075633,    0.9916383686073712,
        0.97268933983236,      0.9770387657790127,    0.16914134724491794,
        0.9325002580387732,    -0.9758066947873516,   0.9705771149967598,
        -0.2015719231067854,   0.9864097252887771,    0.034629304999102446,
        0.9338650866858925,    0.9808331568222944,    0.978819415004644,
        0.9963993676277707,    -0.14397731527967478,  -0.7309874290107601,
        0.9017422405927186,    0.9932192456341211,    -0.45251481342055105,
        0.9892230963720113,    -0.9810110492615833,   0.9888137545756525};

    data.n = 24;
    data.local_alpha.resize(data.n);
    data.local_kernel_data.resize(data.kernel_data.size());
    data.local_response.resize(data.n);
    data.local_gradient.resize(data.n);
    data.y = {1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0};
    data.first_diff = 0;
    data.alpha_diff.resize(data.n);
    // Expected alphas for SVC problem with C=0.2
    data.svc_alpha_expected = {
        0.20000000000000000,  0.20000000000000000,  0.00000000000000000,
        0.00000000000000000,  -0.20000000000000000, 0.20000000000000000,
        0.20000000000000000,  0.00000000000000000,  -0.20000000000000000,
        0.00000000000000000,  -0.20000000000000000, 0.20000000000000000,
        -0.16991556209327535, 0.20000000000000000,  -0.20000000000000000,
        0.00000000000000000,  0.16991556209327535,  0.00000000000000000,
        0.20000000000000000,  -0.20000000000000000, 0.00000000000000000,
        -0.20000000000000000, 0.00000000000000000,  -0.20000000000000000};
    // Expected alphas for nuSVC problem with nu=0.2
    data.nusvc_alpha_expected = {
        0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
        -15.008968808341924, 0.0000000000000000, 10.27858047703366,   0.0000000000000000,
        -37.522422020854776, 0.0000000000000000, 0.0000000000000000,  37.522422020854776,
        0.0000000000000000,  37.522422020854776, -37.522422020854776, 0.0000000000000000,
        0.0000000000000000,  0.0000000000000000, 4.730388331308265,   0.0000000000000000,
        0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000};
    data.idx.resize(data.n);
    std::iota(data.idx.begin(), data.idx.end(), 0);
    data.tol = 1e-4;
    data.C = 0.2;
    data.nu = 0.2;
    data.svc_expected_bias = T(0.0006017631244105252);
    data.nusvc_expected_bias = T(1.6287152383430827);
    params.push_back(data);
}

// First condition of being in I_low
template <typename T>
void set_lower1_data(std::vector<test_is_upper_lower_type<T>> &params) {
    test_is_upper_lower_type<T> data;
    data.C = 1;
    data.alpha = -0.6;
    data.y = -0.5;
    data.is_low = true;
    data.is_up = false;
    params.push_back(data);
}

// Second condition of being in I_low
template <typename T>
void set_lower2_data(std::vector<test_is_upper_lower_type<T>> &params) {
    test_is_upper_lower_type<T> data;
    data.C = 1.5;
    data.alpha = 2;
    data.y = 0.75;
    data.is_low = true;
    data.is_up = false;
    params.push_back(data);
}

// First condition of being in I_up
template <typename T>
void set_upper1_data(std::vector<test_is_upper_lower_type<T>> &params) {
    test_is_upper_lower_type<T> data;
    data.C = 3;
    data.alpha = -2.1;
    data.y = 1.2;
    data.is_low = false;
    data.is_up = true;
    params.push_back(data);
}

// Second condition of being in I_up
template <typename T>
void set_upper2_data(std::vector<test_is_upper_lower_type<T>> &params) {
    test_is_upper_lower_type<T> data;
    data.C = 0.1;
    data.alpha = 0.2;
    data.y = -1;
    data.is_low = false;
    data.is_up = true;
    params.push_back(data);
}

// First condition of being in I_up and second condition of I_low
template <typename T>
void set_both1_data(std::vector<test_is_upper_lower_type<T>> &params) {
    test_is_upper_lower_type<T> data;
    data.C = 10.2;
    data.alpha = 0.1;
    data.y = 25.9;
    data.is_low = true;
    data.is_up = true;
    params.push_back(data);
}

// Second condition of being in I_up and first condition of I_low
template <typename T>
void set_both2_data(std::vector<test_is_upper_lower_type<T>> &params) {
    test_is_upper_lower_type<T> data;
    data.C = 3;
    data.alpha = 0.65;
    data.y = -11;
    data.is_low = true;
    data.is_up = true;
    params.push_back(data);
}

// Test random dataset
template <typename T>
void set_wss1_data(std::vector<test_working_set_selection_type<T>> &params) {
    test_working_set_selection_type<T> data;
    data.size = 10;
    data.C = 1;
    data.alpha = {0.195, 0.861, 0.411, 0.18, -0.305, 0.584, -0.25, 1.567, 1.855, -0.466};
    // Gradient * y
    data.gradient = {-0.583, -0.058, 0.136, 0.851, 0.858,
                     0.826,  0.96,   0.665, 0.556, 0.74};
    data.response = {-1, -1, 1, 1, -1, -1, -1, 1, 1, 1};
    data.kernel_matrix = {
        1.0,   0.508, 0.179, 0.096, 0.297, 0.119, 0.412, 0.07,  0.011, 0.211,
        0.508, 1.0,   0.04,  0.064, 0.353, 0.087, 0.46,  0.152, 0.003, 0.106,
        0.179, 0.04,  1.0,   0.367, 0.038, 0.062, 0.028, 0.038, 0.228, 0.264,
        0.096, 0.064, 0.367, 1.0,   0.02,  0.024, 0.011, 0.031, 0.206, 0.103,
        0.297, 0.353, 0.038, 0.02,  1.0,   0.228, 0.523, 0.337, 0.004, 0.34,
        0.119, 0.087, 0.062, 0.024, 0.228, 1.0,   0.186, 0.12,  0.008, 0.138,
        0.412, 0.46,  0.028, 0.011, 0.523, 0.186, 1.0,   0.141, 0.002, 0.114,
        0.07,  0.152, 0.038, 0.031, 0.337, 0.12,  0.141, 1.0,   0.007, 0.199,
        0.011, 0.003, 0.228, 0.206, 0.004, 0.008, 0.002, 0.007, 1.0,   0.059,
        0.211, 0.106, 0.264, 0.103, 0.34,  0.138, 0.114, 0.199, 0.059, 1.0};
    data.i_expected = 0;
    data.j_expected = 6;
    data.min_gradient_expected = -0.583;
    data.max_gradient_expected = 0.96;
    data.delta_expected = 1.3120748299319727;
    data.idx.resize(data.size);
    std::iota(data.idx.begin(), data.idx.end(), 0);
    data.I_up.resize(data.size);
    data.I_low.resize(data.size);
    params.push_back(data);
}

// Test alpha being vector of 0s
template <typename T>
void set_wss2_data(std::vector<test_working_set_selection_type<T>> &params) {
    test_working_set_selection_type<T> data;
    data.size = 10;
    data.C = 1;
    data.alpha = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    // Gradient * y
    data.gradient = {1, 1, -1, 1, -1, -1, -1, -1, -1, -1};
    data.response = {-1, 1, -1, 1, 1, -1, -1, -1, 1, 1};
    data.kernel_matrix = {
        1.0,   0.275, 0.506, 0.347, 0.062, 0.484, 0.341, 0.385, 0.111, 0.189,
        0.275, 1.0,   0.237, 0.256, 0.035, 0.152, 0.07,  0.376, 0.253, 0.238,
        0.506, 0.237, 1.0,   0.304, 0.139, 0.405, 0.411, 0.52,  0.304, 0.229,
        0.347, 0.256, 0.304, 1.0,   0.047, 0.467, 0.496, 0.308, 0.169, 0.604,
        0.062, 0.035, 0.139, 0.047, 1.0,   0.108, 0.04,  0.077, 0.032, 0.017,
        0.484, 0.152, 0.405, 0.467, 0.108, 1.0,   0.337, 0.292, 0.054, 0.337,
        0.341, 0.07,  0.411, 0.496, 0.04,  0.337, 1.0,   0.294, 0.192, 0.296,
        0.385, 0.376, 0.52,  0.308, 0.077, 0.292, 0.294, 1.0,   0.465, 0.336,
        0.111, 0.253, 0.304, 0.169, 0.032, 0.054, 0.192, 0.465, 1.0,   0.16,
        0.189, 0.238, 0.229, 0.604, 0.017, 0.337, 0.296, 0.336, 0.16,  1.0};
    data.i_expected = 4;
    data.j_expected = 0;
    data.min_gradient_expected = -1;
    data.max_gradient_expected = 1;
    data.delta_expected = 1.0660980810234542;
    data.idx.resize(data.size);
    std::iota(data.idx.begin(), data.idx.end(), 0);
    data.I_up.resize(data.size);
    data.I_low.resize(data.size);
    params.push_back(data);
}

// Test random data
template <typename T>
void set_wss3_data(std::vector<test_working_set_selection_type<T>> &params) {
    test_working_set_selection_type<T> data;
    data.size = 7;
    data.C = 4;
    data.alpha = {1.914, 1.197, -0.154, 1.122, -1.527, 0.56, -1.427};
    // Gradient * y
    data.gradient = {0.889, -0.044, 0.171, 0.471, 0.548, -0.088, -0.137};
    data.response = {1, -1, -1, -1, 1, 1, -1};
    data.kernel_matrix = {1.0,   0.078, 0.018, 0.101, 0.35,  0.175, 0.342, 0.078, 1.0,
                          0.022, 0.291, 0.249, 0.083, 0.343, 0.018, 0.022, 1.0,   0.037,
                          0.012, 0.029, 0.058, 0.101, 0.291, 0.037, 1.0,   0.583, 0.321,
                          0.403, 0.35,  0.249, 0.012, 0.583, 1.0,   0.336, 0.527, 0.175,
                          0.083, 0.029, 0.321, 0.336, 1.0,   0.241, 0.342, 0.343, 0.058,
                          0.403, 0.527, 0.241, 1.0};
    data.i_expected = 5;
    data.j_expected = 0;
    data.min_gradient_expected = -0.088;
    data.max_gradient_expected = 0.889;
    data.delta_expected = 0.5921212121212122;
    data.idx.resize(data.size);
    std::iota(data.idx.begin(), data.idx.end(), 0);
    data.I_up.resize(data.size);
    data.I_low.resize(data.size);
    params.push_back(data);
}

// Test random data
template <typename T>
void set_wss4_data(std::vector<test_working_set_selection_type<T>> &params) {
    test_working_set_selection_type<T> data;
    data.size = 5;
    data.C = 0.01;
    data.alpha = {-1.925, 0.471, 0.448, 0.468, 1.775};
    // Gradient * y
    data.gradient = {0.364, 0.281, -0.126, -0.395, 0.88};
    data.response = {1, -1, 1, -1, -1};
    data.kernel_matrix = {1.0,   0.096, 0.152, 0.666, 0.407, 0.096, 1.0,   0.042, 0.045,
                          0.335, 0.152, 0.042, 1.0,   0.162, 0.256, 0.666, 0.045, 0.162,
                          1.0,   0.427, 0.407, 0.335, 0.256, 0.427, 1.0};
    data.i_expected = 3;
    data.j_expected = 2;
    data.min_gradient_expected = -0.395;
    data.max_gradient_expected = -0.126;
    data.delta_expected = 0.16050119331742246;
    data.idx.resize(data.size);
    std::iota(data.idx.begin(), data.idx.end(), 0);
    data.I_up.resize(data.size);
    data.I_low.resize(data.size);
    params.push_back(data);
}

// Test tricky data
template <typename T>
void set_wss5_data(std::vector<test_working_set_selection_type<T>> &params) {
    test_working_set_selection_type<T> data;
    data.size = 6;
    data.C = 2;
    data.alpha = {2.5, 3.0, 3.0, 4.0, 3.0, 5.0};
    // Gradient * y
    data.gradient = {5.0, 6.0, 7.0, 2.0, 1.0, 2.5};
    data.response = {-1, -1, -1, 1, 1, 1};
    data.kernel_matrix = {1.0,   0.145, 0.218, 0.407, 0.232, 0.189, 0.145, 1.0,   0.079,
                          0.372, 0.078, 0.182, 0.218, 0.079, 1.0,   0.31,  0.589, 0.617,
                          0.407, 0.372, 0.31,  1.0,   0.447, 0.444, 0.232, 0.078, 0.589,
                          0.447, 1.0,   0.292, 0.189, 0.182, 0.617, 0.444, 0.292, 1.0};
    data.i_expected = 0;
    data.j_expected = -1;
    data.min_gradient_expected = 5.0;
    data.max_gradient_expected = 2.5;
    data.delta_expected = 0;
    data.idx.resize(data.size);
    std::iota(data.idx.begin(), data.idx.end(), 0);
    data.I_up.resize(data.size);
    data.I_low.resize(data.size);
    params.push_back(data);
}

// Test sigmoid data
template <typename T>
void set_wss6_data(std::vector<test_working_set_selection_type<T>> &params) {
    test_working_set_selection_type<T> data;
    data.size = 10;
    data.C = 1.5;
    data.alpha = {0.667,  0.683, -1.158, -1.484, -0.738,
                  -0.545, 0.281, -0.246, 1.953,  -1.592};
    // Gradient * y
    data.gradient = {-0.582, -0.677, 0.306, -0.493, -0.067,
                     0.511,  0.682,  0.779, -0.313, 0.724};
    data.response = {1, 1, 1, 1, 1, -1, -1, -1, -1, -1};
    data.kernel_matrix = {
        0.869, 0.934, 0.922, 0.807, 0.896, 0.852, 0.787, 0.901, 0.866, 0.89,
        0.934, 0.999, 0.99,  0.662, 0.97,  0.946, 0.934, 0.985, 0.932, 0.993,
        0.922, 0.99,  0.987, 0.821, 0.957, 0.926, 0.816, 0.929, 0.903, 0.939,
        0.807, 0.662, 0.821, 0.869, 0.798, 0.714, 0.622, 0.674, 0.712, 0.532,
        0.896, 0.97,  0.957, 0.798, 0.955, 0.871, 0.767, 0.923, 0.854, 0.95,
        0.852, 0.946, 0.926, 0.714, 0.871, 0.942, 0.875, 0.946, 0.915, 0.957,
        0.787, 0.934, 0.816, 0.622, 0.767, 0.875, 0.913, 0.926, 0.923, 0.933,
        0.901, 0.985, 0.929, 0.674, 0.923, 0.946, 0.926, 0.996, 0.984, 0.995,
        0.866, 0.932, 0.903, 0.712, 0.854, 0.915, 0.923, 0.984, 0.993, 0.962,
        0.89,  0.993, 0.939, 0.532, 0.95,  0.957, 0.933, 0.995, 0.962, 0.998};
    data.i_expected = 1;
    data.j_expected = 9;
    data.min_gradient_expected = -0.677;
    data.max_gradient_expected = 0.779;
    data.delta_expected = 127.36363636363754;
    data.idx.resize(data.size);
    std::iota(data.idx.begin(), data.idx.end(), 0);
    data.tau = 1e-4;
    data.I_up.resize(data.size);
    data.I_low.resize(data.size);
    params.push_back(data);
}

template <typename T> void set_ldx_test_data_7x2_rbf_svc(test_ldx_type<T> &data) {
    data.n_samples_train = 5, data.n_feat = 2;
    data.n_samples_test = 2;
    data.n_class = 3;
    data.ldx_train = 7;
    data.ldx_train_row = 4;
    data.ldx_test = 3;
    data.ldx_test_row = 4;
    data.lddecision_values = 3;
    data.lddecision_values_row = 5;

    data.X_train = {1.92,  1.76, -1.02, 0.79, 2.86,  0.0, 0.0,
                    -0.52, 0.84, 0.94,  1.34, -0.43, 0.0, 0.0};
    data.X_train_row = {1.92, -0.52, 0.0,  0.0,  1.76, 0.84, 0.0,  0.0,   -1.02, 0.94,
                        0.0,  0.0,   0.79, 1.34, 0.0,  0.0,  2.86, -0.43, 0.0,   0.0};
    data.y_train = {0, 0, 2, 1, 0};

    data.X_test = {-0.15, -1.14, 0.0, 2.33, 1.11, 0.0};
    data.X_test_row = {-0.15, 2.33, 0.0, 0.0, -1.14, 1.11, 0.0, 0.0};
    data.y_test = {1, 2};

    data.kernel = "rbf";
    data.model = svc;

    data.y_pred = {0, 2};
    data.score = 0.5;
    data.decision_values = {2.0851945604285893,   0.9640173018568269,   0.0,
                            0.9558984619874208,   -0.18301526853956182, 0.0,
                            -0.05342267211421351, 2.1907937151787005,   0.0};
    data.decision_values_row = {
        2.0851945604285893, 0.9558984619874208,   -0.05342267211421351, 0.0, 0.0,
        0.9640173018568269, -0.18301526853956182, 2.1907937151787005,   0.0, 0.0};
}

template <typename T> void set_ldx_test_data_7x2_linear_svr(test_ldx_type<T> &data) {
    data.n_samples_train = 5, data.n_feat = 2;
    data.n_samples_test = 2;
    data.ldx_train = 6;
    data.ldx_train_row = 3;
    data.ldx_test = 4;
    data.ldx_test_row = 4;

    data.X_train = {-0.25, 1.53, 0.82, 0.38,  0.21, 0.0,
                    0.94,  1.84, 0.47, -1.45, 0.97, 0.0};
    data.X_train_row = {-0.25, 0.94, 0.0,   1.53, 1.84, 0.0,  0.82, 0.47,
                        0.0,   0.38, -1.45, 0.0,  0.21, 0.97, 0.0};
    data.y_train = {46.46, 238.32, 92.16, -72.75, 82.46};

    data.X_test = {-0.59, 0.6, 0.0, 0.0, 0.91, -0.07, 0.0, 0.0};
    data.X_test_row = {-0.59, 0.91, 0.0, 0.0, 0.6, -0.07, 0.0, 0.0};
    data.y_test = {20.36, 38.93};

    data.kernel = "linear";
    data.model = svr;

    data.y_pred = {80.51479998483657, 80.39299998483658};
    data.score = -29.957571528291425;
}

template <typename T> void set_ldx_test_data_7x2_sigmoid_nusvc(test_ldx_type<T> &data) {
    data.n_samples_train = 5, data.n_feat = 2;
    data.n_samples_test = 2;
    data.ldx_train = 8;
    data.ldx_train_row = 4;
    data.ldx_test = 5;
    data.ldx_test_row = 3;
    data.lddecision_values = 5;
    data.lddecision_values_row = 6;

    data.X_train = {-0.41, 0.62,  1.39, -0.02, 1.2,  0.0, 0.0, 0.0,
                    -0.23, -0.49, 1.06, 0.57,  0.92, 0.0, 0.0, 0.0};
    data.X_train_row = {-0.41, -0.23, 0.0,   0.0,  0.62, -0.49, 0.0, 0.0,  1.39, 1.06,
                        0.0,   0.0,   -0.02, 0.57, 0.0,  0.0,   1.2, 0.92, 0.0,  0.0};
    data.y_train = {2, 1, 0, 1, 0};

    data.X_test = {-0.73, 1.21, 0.0, 0.0, 0.0, -1.14, 1.05, 0.0, 0.0, 0.0};
    data.X_test_row = {-0.73, -1.14, 0.0, 1.21, 1.05, 0.0};
    data.y_test = {2, 0};

    data.kernel = "sigmoid";
    data.model = nusvc;

    data.y_pred = {2, 0};
    data.score = 1.0;
    data.decision_values = {-0.32045025805546634, 2.226338428374182,    0.0, 0.0, 0.0,
                            1.3180352242857731,   1.2475910039864528,   0.0, 0.0, 0.0,
                            2.2677753071103655,   -0.27780582009565413, 0.0, 0.0, 0.0};
    data.decision_values_row = {
        -0.32045025805546634, 1.3180352242857731, 2.2677753071103655,   0.0, 0.0, 0.0,
        2.226338428374182,    1.2475910039864528, -0.27780582009565413, 0.0, 0.0, 0.0};
}

template <typename T> void set_ldx_test_data_7x2_poly_nusvr(test_ldx_type<T> &data) {
    data.n_samples_train = 5, data.n_feat = 2;
    data.n_samples_test = 2;
    data.ldx_train = 6;
    data.ldx_train_row = 4;
    data.ldx_test = 3;
    data.ldx_test_row = 4;

    data.X_train = {2.07, -0.43, -0.04, 0.46, -1.38, 0.0,
                    0.43, 0.3,   0.39,  0.09, -0.54, 0.0};
    data.X_train_row = {2.07, 0.43, 0.0,  0.0,  -0.43, 0.3, 0.0,   0.0,   -0.04, 0.39,
                        0.0,  0.0,  0.46, 0.09, 0.0,   0.0, -1.38, -0.54, 0.0,   0.0};
    data.y_train = {125.09, -1.89, 22.09, 27.03, -98.74};

    data.X_test = {-0.87, -1.1, 0.0, 1.73, -0.82, 0.0};
    data.X_test_row = {-0.87, 1.73, 0.0, 0.0, -1.1, -0.82, 0.0, 0.0};
    data.y_test = {65.67, -103.03};

    data.kernel = "poly";
    data.model = nusvr;

    data.y_pred = {11.96152679112588, 3.5562811749938152};
    data.score = -0.001081559858395753;
}

template <typename T>
void set_get_results_test_data_7x2_rbf_svc(test_get_results_type<T> &data) {
    data.n_samples = 5, data.n_feat = 2;
    data.n_class = 3;

    data.X_train = {1.92, 1.76, -1.02, 0.79, 2.86, -0.52, 0.84, 0.94, 1.34, -0.43};
    data.X_train_row = {1.92, -0.52, 1.76, 0.84, -1.02, 0.94, 0.79, 1.34, 2.86, -0.43};
    data.y_train = {0, 0, 2, 1, 0};

    data.kernel = "rbf";
    data.model = svc;

    data.bias_expected = {0.6772074792534113, 0.36599199958628925, 0.0};
    data.n_support_per_class_expected = {3, 1, 1};
    data.n_support_expected = 5;
    data.support_indexes_expected = {0, 1, 4, 3, 2};

    data.support_vectors_expected = {1.92,  1.76, 2.86,  0.79, -1.02,
                                     -0.52, 0.84, -0.43, 1.34, 0.94};
    data.support_vectors_row_expected = {1.92,  -0.52, 1.76, 0.84,  2.86,
                                         -0.43, 0.79,  1.34, -1.02, 0.94};
    data.support_coefficients_expected = {
        0.0000000000000000,  0.15630174606244573, 0.9410217817349813,  0.4883993724340707,
        0.0589782182650187,  0.35529888150348365, -1.0000000000000000, 1.0000000000000000,
        -1.0000000000000000, -1.0000000000000000};
    data.support_coefficients_row_expected = {
        0.0000000000000000,  0.9410217817349813,  0.0589782182650187, -1.0000000000000000,
        -1.0000000000000000, 0.15630174606244573, 0.4883993724340707, 0.35529888150348365,
        1.0000000000000000,  -1.0000000000000000};
}

template <typename T>
void set_get_results_test_data_7x2_linear_svr(test_get_results_type<T> &data) {
    data.n_samples = 5, data.n_feat = 2;
    data.n_class = 2;

    data.X_train = {1.29, 2.3, -1.73, 0.11, -1.03, -0.73, -0.47, 1.66, -0.38, 0.48};
    data.X_train_row = {1.29, -0.73, 2.3, -0.47, -1.73, 1.66, 0.11, -0.38, -1.03, 0.48};
    data.y_train = {-5.66, 45.94, 53.25, -21.96, -2.46};

    data.kernel = "linear";
    data.model = svr;

    data.bias_expected = {-3.664383850678176};
    data.n_support_per_class_expected = {5};
    data.n_support_expected = 5;
    data.support_indexes_expected = {0, 1, 2, 3, 4};

    data.support_vectors_expected = {1.29,  2.3,   -1.73, 0.11,  -1.03,
                                     -0.73, -0.47, 1.66,  -0.38, 0.48};
    data.support_vectors_row_expected = {1.29, -0.73, 2.3,   -0.47, -1.73,
                                         1.66, 0.11,  -0.38, -1.03, 0.48};
    data.support_coefficients_expected = {-0.7796538205625038, 1.0, 1.0, -1.0,
                                          -0.22034617943749626};
    data.support_coefficients_row_expected = {-0.7796538205625038, 1.0, 1.0, -1.0,
                                              -0.22034617943749626};
}

template <typename T>
void set_get_results_test_data_7x2_sigmoid_nusvc(test_get_results_type<T> &data) {
    data.n_samples = 5, data.n_feat = 2;
    data.n_class = 3;

    data.X_train = {-0.41, 0.62, 1.39, -0.02, 1.2, -0.23, -0.49, 1.06, 0.57, 0.92};
    data.X_train_row = {-0.41, -0.23, 0.62, -0.49, 1.39, 1.06, -0.02, 0.57, 1.2, 0.92};
    data.y_train = {2, 1, 0, 1, 0};

    data.kernel = "sigmoid";
    data.model = nusvc;

    data.bias_expected = {-10.348823143778086, -0.28937515393397606, 0.286159270956276};
    data.n_support_per_class_expected = {2, 2, 1};
    data.n_support_expected = 5;
    data.support_indexes_expected = {2, 4, 1, 3, 0};

    data.support_vectors_expected = {1.39, 1.2,  0.62,  -0.02, -0.41,
                                     1.06, 0.92, -0.49, 0.57,  -0.23};
    data.support_vectors_row_expected = {1.39,  1.06,  1.2,  0.92,  0.62,
                                         -0.49, -0.02, 0.57, -0.41, -0.23};
    data.support_coefficients_expected = {
        22.296222569964403,  0.0000000000000000, 0.0000000000000000, 0.7794640330379408,
        -6.525807700354273,  1.3283122073052196, -15.77041486961013, 1.934169052111064,
        -0.7794640330379408, -3.2624812594162833};
    data.support_coefficients_row_expected = {
        22.296222569964403,  0.0000000000000000, -6.525807700354273, -15.77041486961013,
        -0.7794640330379408, 0.0000000000000000, 0.7794640330379408, 1.3283122073052196,
        1.934169052111064,   -3.2624812594162833};
}

template <typename T>
void set_get_results_test_data_7x2_poly_nusvr(test_get_results_type<T> &data) {
    data.n_samples = 5, data.n_feat = 2;
    data.n_class = 2;

    data.X_train = {2.07, -0.43, -0.04, 0.46, -1.38, 0.43, 0.3, 0.39, 0.09, -0.54};
    data.X_train_row = {2.07, 0.43, -0.43, 0.3, -0.04, 0.39, 0.46, 0.09, -1.38, -0.54};
    data.y_train = {125.09, -1.89, 22.09, 27.03, -98.74};

    data.kernel = "poly";
    data.model = nusvr;

    data.bias_expected = {12.437607185762609};
    data.n_support_per_class_expected = {4};
    data.n_support_expected = 4;
    data.support_indexes_expected = {0, 1, 3, 4};

    data.support_vectors_expected = {2.07, -0.43, 0.46, -1.38, 0.43, 0.3, 0.09, -0.54};
    data.support_vectors_row_expected = {2.07, 0.43, -0.43, 0.3,
                                         0.46, 0.09, -1.38, -0.54};
    data.support_coefficients_expected = {1.0, -0.25, 0.25, -1.0};
    data.support_coefficients_row_expected = {1.0, -0.25, 0.25, -1.0};
}

template <typename T>
void set_row_major_test_data_15x2_poly_svc(test_row_major_type<T> &data) {
    data.n_samples = 10, data.n_feat = 2;
    data.n_samples_test = 5, data.n_feat_test = 2;
    data.n_class = 4;

    data.X_train = {5.37,  5.3,  -5.68, 4.0,   3.52, -4.88, 7.27, -5.06, -5.73, -3.94,
                    -5.54, 3.64, -4.97, -6.24, 4.87, 4.38,  5.1,  5.09,  -4.72, -4.77};
    data.y_train = {3, 1, 2, 2, 0, 1, 0, 3, 3, 0};
    data.X_test = {-4.53, 5.18, -5.87, 4.66, 3.95, -4.63, -4.2, -2.79, 3.9, -4.86};
    data.y_test = {1, 1, 2, 0, 2};

    data.kernel = "poly";
    data.model = svc;

    data.decision_values_ovr = {
        0.978274228773807,    3.2459706446652326, -0.2429377763845776,
        1.981639319034845,    0.9235443198961295, 3.265118304411677,
        -0.2558279834324502,  1.925446606126104,  1.0943465496793139,
        -0.22280376947768868, 3.1911155441654397, 2.0723425000601114,
        3.1877938829330312,   0.9887827825962999, 1.9159653287853953,
        -0.15957940969358078, 1.0939196912656144, -0.2263794372744084,
        3.1975302445931595,   2.070821275908819};
    data.decision_values_ovo = {
        -0.8893897179344127,  0.856304673345841,   -0.03663653430790914,
        1.051657102362709,    0.87446456580157,    -0.7795350945446684,
        -1.2595433180056,     0.9941351884416482,  -0.03222648030837701,
        1.4024061916152042,   1.224559205579772,   -0.9042370018175989,
        0.6446667419561238,   -0.2137184122883074, -0.036171061080867865,
        -0.8621808519401323,  -0.5089367963206273, 0.26792379253290693,
        0.38911195580971497,  0.5175582584134925,  0.3836595377204016,
        -0.06506064502229252, 0.4193490795954901,  0.11541328850788662,
        0.6734196897145244,   -0.2454239342986102, -0.03570528084450695,
        -0.9092729096842721,  -0.5339150756473507, 0.29983741164871014};
    data.y_pred = {1, 1, 2, 0, 2};
    data.score = 1.0;

    // These values are for multiple calls test
    data.bias_expected = {0.02097686286990188,   0.22396227124725412,
                          -0.036417953597749235, -0.08155937031579971,
                          0.05333676108324434,   -0.16066897688000634};
    data.n_support_per_class_expected = {2, 2, 2, 2};
    data.n_support_expected = 8;
    data.support_indexes_expected = {4, 9, 1, 5, 2, 3, 7, 8};

    data.support_vectors_expected = {-5.73, -3.94, -4.72, -4.77, -5.68, 4.0,
                                     -5.54, 3.64,  3.52,  -4.88, 7.27,  -5.06,
                                     4.87,  4.38,  5.1,   5.09};
    data.support_coefficients_expected = {
        0.3952619075103987,  1.0000000000000000,  -0.3952619075103987,
        -1.0000000000000000, -1.0000000000000000, -0.07943784270959703,
        -0.8061640546845951, 0.0000000000000000,  0.07943784270959701,
        1.0000000000000000,  0.0000000000000000,  1.0000000000000000,
        -1.0000000000000000, 0.0000000000000000,  -1.0000000000000000,
        -0.273297649824167,  0.0000000000000000,  0.8061640546845951,
        0.273297649824167,   1.0000000000000000,  1.0000000000000000,
        0.07040511051614212, -1.0000000000000000, -0.07040511051614212};
}

template <typename T>
void set_row_major_test_data_15x2_sigmoid_svr(test_row_major_type<T> &data) {
    data.n_samples = 10, data.n_feat = 2;
    data.n_samples_test = 5, data.n_feat_test = 2;
    data.n_class = 2;

    data.X_train = {-0.33, 0.44,  1.86, 1.15,  -0.33, 0.19, -0.11, 0.0,   0.71,  1.0,
                    0.6,   -0.36, -0.2, -1.19, -0.25, 2.43, -0.86, -0.98, -0.36, 0.06};
    data.y_train = {-4.38, 256.73, -20.51, -10.23,  133.97,
                    36.52, -96.51, 130.67, -147.19, -32.02};
    data.X_test = {-0.7, -1.66, 0.64, -1.51, -0.59, -0.91, -0.42, -0.87, 1.58, 0.11};
    data.y_test = {-175.52, -33.13, -116.49, -97.43, 162.99};

    data.kernel = "sigmoid";
    data.model = svr;

    data.y_pred = {-12.410016599128415, -10.177534891935467, -11.607965324893188,
                   -11.270183441707278, -4.033879301714132};
    data.score = -0.07928140138047213;

    // These values are for multiple calls test
    data.bias_expected = {-7.544703030784878};
    data.n_support_per_class_expected = {10};
    data.n_support_expected = 10;
    data.support_indexes_expected = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};

    data.support_vectors_expected = {-0.33, 0.44, 1.86,  1.15,  -0.33, 0.19, -0.11,
                                     0.0,   0.71, 1.0,   0.6,   -0.36, -0.2, -1.19,
                                     -0.25, 2.43, -0.86, -0.98, -0.36, 0.06};
    data.support_coefficients_expected = {1.0, 1.0,  -1.0, -1.0, 1.0,
                                          1.0, -1.0, 1.0,  -1.0, -1.0};
}

template <typename T>
void set_row_major_test_data_15x2_rbf_nusvc(test_row_major_type<T> &data) {
    data.n_samples = 10, data.n_feat = 2;
    data.n_samples_test = 5, data.n_feat_test = 2;
    data.n_class = 2;

    data.X_train = {-5.36, -4.96, -6.93, -4.89, -4.9, -6.33, 3.94,  -4.44, -4.48, -6.0,
                    -5.17, -6.04, 5.03,  -4.94, 4.54, -4.52, -4.06, -5.75, 4.64,  -3.83};
    data.y_train = {0, 0, 0, 1, 0, 0, 1, 1, 0, 1};
    data.X_test = {4.83, -4.73, -5.23, -5.53, 3.98, -4.91, 5.54, -5.24, -4.77, -4.82};
    data.y_test = {1, 0, 1, 1, 0};

    data.kernel = "rbf";
    data.model = nusvc;

    data.decision_values_ovr = {1.0068317941449523, -1.052674129044755,
                                0.9629614956413298, 0.9712537517667187,
                                -1.0111473924122487};
    data.decision_values_ovo = {1.0068317941449523, -1.052674129044755,
                                0.9629614956413298, 0.9712537517667187,
                                -1.0111473924122487};
    data.y_pred = {1, 0, 1, 1, 0};
    data.score = 1.0;

    // These values are for multiple calls test
    data.bias_expected = {-0.04766744313157231};
    data.n_support_per_class_expected = {3, 3};
    data.n_support_expected = 6;
    data.support_indexes_expected = {1, 3, 4, 6, 8, 9};

    data.support_vectors_expected = {-6.93, -4.89, 3.94,  -4.44, -4.48, -6.0,
                                     5.03,  -4.94, -4.06, -5.75, 4.64,  -3.83};
    data.support_coefficients_expected = {-0.45018999967630124, 0.4522272885616979,
                                          -0.22815093316624563, 0.3501882521907997,
                                          -0.4522272885616979,  0.32815268065174713};
}

template <typename T>
void set_row_major_test_data_15x2_linear_nusvr(test_row_major_type<T> &data) {
    data.n_samples = 10, data.n_feat = 2;
    data.n_samples_test = 5, data.n_feat_test = 2;
    data.n_class = 2;

    data.X_train = {-0.33, 0.44,  1.86, 1.15,  -0.33, 0.19, -0.11, 0.0,   0.71,  1.0,
                    0.6,   -0.36, -0.2, -1.19, -0.25, 2.43, -0.86, -0.98, -0.36, 0.06};
    data.y_train = {-4.38, 256.73, -20.51, -10.23,  133.97,
                    36.52, -96.51, 130.67, -147.19, -32.02};
    data.X_test = {-0.7, -1.66, 0.64, -1.51, -0.59, -0.91, -0.42, -0.87, 1.58, 0.11};
    data.y_test = {-175.52, -33.13, -116.49, -97.43, 162.99};

    data.kernel = "linear";
    data.model = nusvr;

    data.y_pred = {31.87739996807211, 37.64104996807211, 36.41149996807211,
                   37.25814996807211, 50.02304996807211};
    data.score = -0.5032084325788619;

    // These values are for multiple calls test
    data.bias_expected = {43.5952};
    data.n_support_per_class_expected = {6};
    data.n_support_expected = 6;
    data.support_indexes_expected = {1, 4, 6, 7, 8, 9};

    data.support_vectors_expected = {1.86,  1.15, 0.71,  1.0,   -0.2,  -1.19,
                                     -0.25, 2.43, -0.86, -0.98, -0.36, 0.06};
    data.support_coefficients_expected = {1.0, 1.0, -1.0, 0.5, -1.0, -0.5};
}

// y is all zeros => only one class detected => invalid_input
template <typename T> void set_invalid_data_y_zeros(test_invalid_data_type<T> &data) {
    data.n_samples = 5, data.n_feat = 2;

    data.X_train = {-2.99, -0.15, -0.09, 0.45, -1.03, -0.02, 1.59, 0.34, 0.04, 2.52};
    data.y_train = {0.0, 0.0, 0.0, 0.0, 0.0};

    data.kernel = "linear";
    data.model = {svc, nusvc};

    data.set_data_expected_status = da_status_invalid_input;
    data.compute_expected_status =
        da_status_no_data; // setting data failed so this will fail too
    data.predict_expected_status =
        da_status_out_of_date; // compute failed so this will fail too
}

// y is all twos => three classes detected => class 0 and class 1 has no samples => invalid_input
template <typename T> void set_invalid_data_y_twos(test_invalid_data_type<T> &data) {
    data.n_samples = 5, data.n_feat = 2;

    data.X_train = {-2.99, -0.15, -0.09, 0.45, -1.03, -0.02, 1.59, 0.34, 0.04, 2.52};
    data.y_train = {2.0, 2.0, 2.0, 2.0, 2.0};

    data.kernel = "linear";
    data.model = {svc, nusvc};

    data.set_data_expected_status = da_status_invalid_input;
    data.compute_expected_status =
        da_status_no_data; // setting data failed so this will fail too
    data.predict_expected_status =
        da_status_out_of_date; // compute failed so this will fail too
}

// y is all twos => one label => no support vectors => numerical_difficulties
template <typename T> void set_invalid_data_y_twos_regr(test_invalid_data_type<T> &data) {
    data.n_samples = 5, data.n_feat = 2;

    data.X_train = {-2.99, -0.15, -0.09, 0.45, -1.03, -0.02, 1.59, 0.34, 0.04, 2.52};
    data.y_train = {2.0, 2.0, 2.0, 2.0, 2.0};

    data.kernel = "rbf";
    data.model = {svr, nusvr};

    data.set_data_expected_status = da_status_success;
    data.compute_expected_status = da_status_numerical_difficulties;
    data.predict_expected_status =
        da_status_success; // above is just a warning so predict should pass
}

// y is has samples for classes 1,2,3 => so samples for class 0 => invalid_input
template <typename T>
void set_invalid_data_y_missing_class(test_invalid_data_type<T> &data) {
    data.n_samples = 5, data.n_feat = 2;

    data.X_train = {-2.99, -0.15, -0.09, 0.45, -1.03, -0.02, 1.59, 0.34, 0.04, 2.52};
    data.y_train = {1.0, 2.0, 3.0, 1.0, 2.0};

    data.kernel = "linear";
    data.model = {svc, nusvc};

    data.set_data_expected_status = da_status_invalid_input;
    data.compute_expected_status =
        da_status_no_data; // setting data failed so this will fail too
    data.predict_expected_status =
        da_status_out_of_date; // compute failed so this will fail too
}

// y not whole numbers => wrong format of y => invalid_input
template <typename T> void set_invalid_data_y_not_whole(test_invalid_data_type<T> &data) {
    data.n_samples = 5, data.n_feat = 2;

    data.X_train = {-2.99, -0.15, -0.09, 0.45, -1.03, -0.02, 1.59, 0.34, 0.04, 2.52};
    data.y_train = {0.0, 1.0, 2.0, 1.5, 0.0};

    data.kernel = "linear";
    data.model = {svc, nusvc};

    data.set_data_expected_status = da_status_invalid_input;
    data.compute_expected_status =
        da_status_no_data; // setting data failed so this will fail too
    data.predict_expected_status =
        da_status_out_of_date; // compute failed so this will fail too
}

// y has negative numbers => detected number of classes < 2 => invalid_input
template <typename T> void set_invalid_data_y_negative(test_invalid_data_type<T> &data) {
    data.n_samples = 5, data.n_feat = 2;

    data.X_train = {-2.99, -0.15, -0.09, 0.45, -1.03, -0.02, 1.59, 0.34, 0.04, 2.52};
    data.y_train = {0.0, -1.0, -1.0, 0.0, 0.0};

    data.kernel = "linear";
    data.model = {svc, nusvc};

    data.set_data_expected_status = da_status_invalid_input;
    data.compute_expected_status =
        da_status_no_data; // setting data failed so this will fail too
    data.predict_expected_status =
        da_status_out_of_date; // compute failed so this will fail too
}

// X is all zeros => variance == 0 => default value of gamma cannot be calculated (0 denominator)
template <typename T> void set_invalid_data_X_zeros(test_invalid_data_type<T> &data) {
    data.n_samples = 5, data.n_feat = 2;

    data.X_train = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
    data.y_train = {1.0, 2.0, 0.0, 1.0, 0.0};

    data.kernel = "rbf";
    data.model = {svc, nusvc, svr, nusvr};

    data.set_data_expected_status = da_status_success;
    data.compute_expected_status =
        da_status_invalid_input; // we try to compute gamma at this stage
    data.predict_expected_status =
        da_status_out_of_date; // compute failed so this will fail too
}

// X is 1 by 2 => one class detected => invalid_input
template <typename T> void set_invalid_data_X_small(test_invalid_data_type<T> &data) {
    data.n_samples = 1, data.n_feat = 2;

    data.X_train = {0.0, 1.0};
    data.y_train = {0.0};

    data.kernel = "rbf";
    data.model = {svc, nusvc};

    data.set_data_expected_status = da_status_invalid_input;
    data.compute_expected_status =
        da_status_no_data; // setting data failed so this will fail too
    data.predict_expected_status =
        da_status_out_of_date; // compute failed so this will fail too
}

// X is 1 by 2 => same label => no support vectors => numerical_difficulties
// (note that variance can be 0 here because we use linear kernel that do not use gamma)
template <typename T>
void set_invalid_data_X_small_regr(test_invalid_data_type<T> &data) {
    data.n_samples = 1, data.n_feat = 2;

    data.X_train = {0.0, 0.0};
    data.y_train = {0.0};

    data.kernel = "linear";
    data.model = {svr, nusvr};

    data.set_data_expected_status = da_status_success;
    data.compute_expected_status = da_status_numerical_difficulties;
    data.predict_expected_status =
        da_status_success; // above is just a warning so predict should pass
}
